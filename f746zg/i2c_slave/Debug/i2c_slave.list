
i2c_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006184  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e0  080063e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000070  08006458  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006458  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd62  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002046  00000000  00000000  0002de45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008bc  00000000  00000000  000309e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261dd  00000000  00000000  0003129c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f042  00000000  00000000  00057479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8b39  00000000  00000000  000664bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035c0  00000000  00000000  0014eff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001525b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800633c 	.word	0x0800633c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800633c 	.word	0x0800633c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <I2C_Slave_Init>:
uint8_t TxData[RxSIZE] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6}; ////////////////////////////////

int count = 0;

///////////////////////////////////////////////////////////
void I2C_Slave_Init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    HAL_I2C_EnableListen_IT(&hi2c1);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <I2C_Slave_Init+0x10>)
 80005b2:	f001 fba1 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000098 	.word	0x20000098

080005c0 <I2C_Slave_Receive>:
void I2C_Slave_Receive(uint8_t* buffer, uint16_t size) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Slave_Receive_IT(&hi2c1, buffer, size);
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	461a      	mov	r2, r3
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <I2C_Slave_Receive+0x20>)
 80005d4:	f001 fa8e 	bl	8001af4 <HAL_I2C_Slave_Receive_IT>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000098 	.word	0x20000098

080005e4 <I2C_Slave_Transmit>:

void I2C_Slave_Transmit(uint8_t* buffer, uint16_t size) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Slave_Transmit_IT(&hi2c1, buffer, size);
 80005f0:	887b      	ldrh	r3, [r7, #2]
 80005f2:	461a      	mov	r2, r3
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <I2C_Slave_Transmit+0x20>)
 80005f8:	f001 fa0e 	bl	8001a18 <HAL_I2C_Slave_Transmit_IT>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000098 	.word	0x20000098

08000608 <HAL_I2C_ListenCpltCallback>:
/////////////////////////////////////////////////////////////


void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f001 fb71 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
 800062c:	4613      	mov	r3, r2
 800062e:	803b      	strh	r3, [r7, #0]
	//////////////////////////////////////////////////////////////////////////////
    if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000630:	78fb      	ldrb	r3, [r7, #3]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d104      	bne.n	8000640 <HAL_I2C_AddrCallback+0x20>
        I2C_Slave_Receive(RxData, RxSIZE);
 8000636:	2106      	movs	r1, #6
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <HAL_I2C_AddrCallback+0x4c>)
 800063a:	f7ff ffc1 	bl	80005c0 <I2C_Slave_Receive>
 800063e:	e003      	b.n	8000648 <HAL_I2C_AddrCallback+0x28>
    } else {
        I2C_Slave_Transmit(TxData, RxSIZE);
 8000640:	2106      	movs	r1, #6
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_I2C_AddrCallback+0x50>)
 8000644:	f7ff ffce 	bl	80005e4 <I2C_Slave_Transmit>
    }
    ///////////////////////////////////////////////////////////////////////////////

	// here is the code focus on receiver from the master
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)	// check the transmitting data to the slave
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d107      	bne.n	800065e <HAL_I2C_AddrCallback+0x3e>
	{
		HAL_I2C_Slave_Sequential_Transmit_IT(hi2c, RxData, RxSIZE, I2C_FIRST_AND_LAST_FRAME);
 800064e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000652:	2206      	movs	r2, #6
 8000654:	4905      	ldr	r1, [pc, #20]	; (800066c <HAL_I2C_AddrCallback+0x4c>)
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f001 fa9c 	bl	8001b94 <HAL_I2C_Slave_Seq_Transmit_IT>
	}
	else
	{
		Error_Handler();
	}
}
 800065c:	e001      	b.n	8000662 <HAL_I2C_AddrCallback+0x42>
		Error_Handler();
 800065e:	f000 f9ab 	bl	80009b8 <Error_Handler>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	2000008c 	.word	0x2000008c
 8000670:	20000000 	.word	0x20000000

08000674 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	count++;
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	3301      	adds	r3, #1
 8000682:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8000684:	6013      	str	r3, [r2, #0]
	HAL_I2C_EnableListen_IT(hi2c); //////////////////////////////////////////////////////////////////
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f001 fb36 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000094 	.word	0x20000094

08000698 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f001 fb29 	bl	8001cf8 <HAL_I2C_EnableListen_IT>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY); // Исправлено имя структуры UART
 80006b8:	1d39      	adds	r1, r7, #4
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	2201      	movs	r2, #1
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <__io_putchar+0x20>)
 80006c2:	f004 f9f1 	bl	8004aa8 <HAL_UART_Transmit>
	return ch;
 80006c6:	687b      	ldr	r3, [r7, #4]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000ec 	.word	0x200000ec

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006da:	f000 fb84 	bl	8000de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006de:	f000 f865 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 f939 	bl	8000958 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e6:	f000 f8c7 	bl	8000878 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80006ea:	f000 f905 	bl	80008f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint16_t slaveADDR = 0x12<<1;
 80006ee:	2324      	movs	r3, #36	; 0x24
 80006f0:	81fb      	strh	r3, [r7, #14]
  uint8_t TxData[6] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6};
 80006f2:	4a28      	ldr	r2, [pc, #160]	; (8000794 <main+0xc0>)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006fc:	6018      	str	r0, [r3, #0]
 80006fe:	3304      	adds	r3, #4
 8000700:	8019      	strh	r1, [r3, #0]
  uint8_t RxData[6];///////////////////////////////////////////////////////////////////////////////

  I2C_Slave_Init();
 8000702:	f7ff ff53 	bl	80005ac <I2C_Slave_Init>
//	  printf("%hhn\r\n", TxData);
//	  printf("%0x\r\n", slaveADDR);
//	  printf("%p\r\n", &hi2c1);

	  ////////////////////////////////////////////////////////////////////////////////////////////////////
	  HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 8000706:	f107 0208 	add.w	r2, r7, #8
 800070a:	89f9      	ldrh	r1, [r7, #14]
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2306      	movs	r3, #6
 8000714:	4820      	ldr	r0, [pc, #128]	; (8000798 <main+0xc4>)
 8000716:	f000 ff71 	bl	80015fc <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, slaveADDR, RxData, 6, 1000);
 800071a:	463a      	mov	r2, r7
 800071c:	89f9      	ldrh	r1, [r7, #14]
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2306      	movs	r3, #6
 8000726:	481c      	ldr	r0, [pc, #112]	; (8000798 <main+0xc4>)
 8000728:	f001 f880 	bl	800182c <HAL_I2C_Master_Receive>
	  HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f000 fbb6 	bl	8000ea0 <HAL_Delay>

	    printf("Transmitted Data: ");
 8000734:	4819      	ldr	r0, [pc, #100]	; (800079c <main+0xc8>)
 8000736:	f004 ff31 	bl	800559c <iprintf>
	    for (int i = 0; i < 6; i++) {
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e00b      	b.n	8000758 <main+0x84>
	      printf("%02X ", TxData[i]);
 8000740:	f107 0208 	add.w	r2, r7, #8
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	4619      	mov	r1, r3
 800074c:	4814      	ldr	r0, [pc, #80]	; (80007a0 <main+0xcc>)
 800074e:	f004 ff25 	bl	800559c <iprintf>
	    for (int i = 0; i < 6; i++) {
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	2b05      	cmp	r3, #5
 800075c:	ddf0      	ble.n	8000740 <main+0x6c>
	    }
	    printf("\r\n");
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <main+0xd0>)
 8000760:	f004 ff82 	bl	8005668 <puts>

	    printf("Received Data: ");
 8000764:	4810      	ldr	r0, [pc, #64]	; (80007a8 <main+0xd4>)
 8000766:	f004 ff19 	bl	800559c <iprintf>
	    for (int i = 0; i < 6; i++) {
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	e00a      	b.n	8000786 <main+0xb2>
	      printf("%02X ", RxData[i]);
 8000770:	463a      	mov	r2, r7
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	4413      	add	r3, r2
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <main+0xcc>)
 800077c:	f004 ff0e 	bl	800559c <iprintf>
	    for (int i = 0; i < 6; i++) {
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	3301      	adds	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
 8000788:	2b05      	cmp	r3, #5
 800078a:	ddf1      	ble.n	8000770 <main+0x9c>
	    }

	    printf("\r\n");
 800078c:	4805      	ldr	r0, [pc, #20]	; (80007a4 <main+0xd0>)
 800078e:	f004 ff6b 	bl	8005668 <puts>
	  HAL_I2C_Master_Transmit(&hi2c1, slaveADDR, TxData, 6, 1000);
 8000792:	e7b8      	b.n	8000706 <main+0x32>
 8000794:	08006384 	.word	0x08006384
 8000798:	20000098 	.word	0x20000098
 800079c:	08006354 	.word	0x08006354
 80007a0:	08006368 	.word	0x08006368
 80007a4:	08006370 	.word	0x08006370
 80007a8:	08006374 	.word	0x08006374

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 f834 	bl	8005828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SystemClock_Config+0xc4>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a26      	ldr	r2, [pc, #152]	; (8000870 <SystemClock_Config+0xc4>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <SystemClock_Config+0xc4>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	4b22      	ldr	r3, [pc, #136]	; (8000874 <SystemClock_Config+0xc8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <SystemClock_Config+0xc8>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6013      	str	r3, [r2, #0]
 80007f8:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <SystemClock_Config+0xc8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000808:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080e:	2302      	movs	r3, #2
 8000810:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000818:	2304      	movs	r3, #4
 800081a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800081c:	2348      	movs	r3, #72	; 0x48
 800081e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000824:	2303      	movs	r3, #3
 8000826:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f003 f833 	bl	8003898 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000838:	f000 f8be 	bl	80009b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2102      	movs	r1, #2
 8000858:	4618      	mov	r0, r3
 800085a:	f003 fac1 	bl	8003de0 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000864:	f000 f8a8 	bl	80009b8 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3750      	adds	r7, #80	; 0x50
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 36;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2224      	movs	r2, #36	; 0x24
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	f000 fe06 	bl	80014c4 <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 f87b 	bl	80009b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c6:	f002 ff4f 	bl	8003768 <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 f872 	bl	80009b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d8:	f002 ff91 	bl	80037fe <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f869 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000098 	.word	0x20000098
 80008f0:	40005400 	.word	0x40005400
 80008f4:	00808cd2 	.word	0x00808cd2

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f004 f866 	bl	8004a0c <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f837 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000ec 	.word	0x200000ec
 8000954:	40004800 	.word	0x40004800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_GPIO_Init+0x5c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <MX_GPIO_Init+0x5c>)
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_GPIO_Init+0x5c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x44>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b0aa      	sub	sp, #168	; 0xa8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2284      	movs	r2, #132	; 0x84
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fefb 	bl	8005828 <memset>
  if(hi2c->Instance==I2C1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a2a      	ldr	r2, [pc, #168]	; (8000ae0 <HAL_I2C_MspInit+0xd4>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d14c      	bne.n	8000ad6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f003 fbee 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a56:	f7ff ffaf 	bl	80009b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_I2C_MspInit+0xd8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <HAL_I2C_MspInit+0xd8>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_I2C_MspInit+0xd8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000a72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a96:	4619      	mov	r1, r3
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <HAL_I2C_MspInit+0xdc>)
 8000a9a:	f000 fb67 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_I2C_MspInit+0xd8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_I2C_MspInit+0xd8>)
 8000aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_I2C_MspInit+0xd8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	201f      	movs	r0, #31
 8000abc:	f000 faef 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ac0:	201f      	movs	r0, #31
 8000ac2:	f000 fb08 	bl	80010d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2020      	movs	r0, #32
 8000acc:	f000 fae7 	bl	800109e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ad0:	2020      	movs	r0, #32
 8000ad2:	f000 fb00 	bl	80010d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	37a8      	adds	r7, #168	; 0xa8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b0aa      	sub	sp, #168	; 0xa8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2284      	movs	r2, #132	; 0x84
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 fe8b 	bl	8005828 <memset>
  if(huart->Instance==USART3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <HAL_UART_MspInit+0xb4>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d13c      	bne.n	8000b96 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 0310 	add.w	r3, r7, #16
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fb7e 	bl	800422c <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b36:	f7ff ff3f 	bl	80009b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0xb8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0xbc>)
 8000b92:	f000 faeb 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	37a8      	adds	r7, #168	; 0xa8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004800 	.word	0x40004800
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f932 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <I2C1_EV_IRQHandler+0x10>)
 8000c06:	f001 f897 	bl	8001d38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000098 	.word	0x20000098

08000c14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <I2C1_ER_IRQHandler+0x10>)
 8000c1a:	f001 f8a7 	bl	8001d6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000098 	.word	0x20000098

08000c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
  }

  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fd17 	bl	80006b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf1      	blt.n	8000c74 <_write+0x12>
  }
  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:

int _isatty(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	; (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f004 fdc6 	bl	80058c4 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	; (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20050000 	.word	0x20050000
 8000d64:	00000400 	.word	0x00000400
 8000d68:	20000174 	.word	0x20000174
 8000d6c:	200002c8 	.word	0x200002c8

08000d70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f004 fd85 	bl	80058d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fc85 	bl	80006d4 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dd8:	080063e8 	.word	0x080063e8
  ldr r2, =_sbss
 8000ddc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de0:	200002c8 	.word	0x200002c8

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>

08000de6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dea:	2003      	movs	r0, #3
 8000dec:	f000 f94c 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f805 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df6:	f7ff fde5 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f967 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3c:	f000 f92f 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000010 	.word	0x20000010
 8000e5c:	2000000c 	.word	0x2000000c

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x20>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x24>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <HAL_IncTick+0x24>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	20000010 	.word	0x20000010
 8000e84:	20000178 	.word	0x20000178

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <HAL_GetTick+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000178 	.word	0x20000178

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff ffee 	bl	8000e88 <HAL_GetTick>
 8000eac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec6:	bf00      	nop
 8000ec8:	f7ff ffde 	bl	8000e88 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000010 	.word	0x20000010

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x40>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	05fa0000 	.word	0x05fa0000

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff3e 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff31 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d004      	beq.n	8001128 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e00c      	b.n	8001142 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2205      	movs	r2, #5
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115c:	b2db      	uxtb	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e175      	b.n	8001478 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 8164 	bne.w	8001472 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x56>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80be 	beq.w	8001472 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b66      	ldr	r3, [pc, #408]	; (8001490 <HAL_GPIO_Init+0x324>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a65      	ldr	r2, [pc, #404]	; (8001490 <HAL_GPIO_Init+0x324>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b63      	ldr	r3, [pc, #396]	; (8001490 <HAL_GPIO_Init+0x324>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800130e:	4a61      	ldr	r2, [pc, #388]	; (8001494 <HAL_GPIO_Init+0x328>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a58      	ldr	r2, [pc, #352]	; (8001498 <HAL_GPIO_Init+0x32c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d037      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a57      	ldr	r2, [pc, #348]	; (800149c <HAL_GPIO_Init+0x330>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d031      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a56      	ldr	r2, [pc, #344]	; (80014a0 <HAL_GPIO_Init+0x334>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d02b      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <HAL_GPIO_Init+0x338>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d025      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a54      	ldr	r2, [pc, #336]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d01f      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a53      	ldr	r2, [pc, #332]	; (80014ac <HAL_GPIO_Init+0x340>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x22a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	; (80014b0 <HAL_GPIO_Init+0x344>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a51      	ldr	r2, [pc, #324]	; (80014b4 <HAL_GPIO_Init+0x348>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4f      	ldr	r2, [pc, #316]	; (80014bc <HAL_GPIO_Init+0x350>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x21a>
 8001382:	2309      	movs	r3, #9
 8001384:	e012      	b.n	80013ac <HAL_GPIO_Init+0x240>
 8001386:	230a      	movs	r3, #10
 8001388:	e010      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800138a:	2308      	movs	r3, #8
 800138c:	e00e      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800138e:	2307      	movs	r3, #7
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x240>
 8001392:	2306      	movs	r3, #6
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x240>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x240>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x240>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x240>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x240>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x328>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <HAL_GPIO_Init+0x354>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <HAL_GPIO_Init+0x354>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_GPIO_Init+0x354>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <HAL_GPIO_Init+0x354>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_GPIO_Init+0x354>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <HAL_GPIO_Init+0x354>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_GPIO_Init+0x354>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_GPIO_Init+0x354>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae86 	bls.w	800118c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40013800 	.word	0x40013800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40021c00 	.word	0x40021c00
 80014b8:	40022000 	.word	0x40022000
 80014bc:	40022400 	.word	0x40022400
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e08b      	b.n	80015ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d106      	bne.n	80014f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fa8e 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001514:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001524:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	e006      	b.n	800154c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800154a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d108      	bne.n	8001566 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	e007      	b.n	8001576 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_I2C_Init+0x134>)
 8001582:	430b      	orrs	r3, r1
 8001584:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001594:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69d9      	ldr	r1, [r3, #28]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1a      	ldr	r2, [r3, #32]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	02008000 	.word	0x02008000

080015fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	461a      	mov	r2, r3
 8001608:	460b      	mov	r3, r1
 800160a:	817b      	strh	r3, [r7, #10]
 800160c:	4613      	mov	r3, r2
 800160e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b20      	cmp	r3, #32
 800161a:	f040 80fd 	bne.w	8001818 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_I2C_Master_Transmit+0x30>
 8001628:	2302      	movs	r3, #2
 800162a:	e0f6      	b.n	800181a <HAL_I2C_Master_Transmit+0x21e>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001634:	f7ff fc28 	bl	8000e88 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2319      	movs	r3, #25
 8001640:	2201      	movs	r2, #1
 8001642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f001 fd2b 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0e1      	b.n	800181a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2221      	movs	r2, #33	; 0x21
 800165a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2210      	movs	r2, #16
 8001662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	893a      	ldrh	r2, [r7, #8]
 8001676:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	2bff      	cmp	r3, #255	; 0xff
 8001686:	d906      	bls.n	8001696 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800168e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	e007      	b.n	80016a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80016a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d024      	beq.n	80016f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	3b01      	subs	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	8979      	ldrh	r1, [r7, #10]
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_I2C_Master_Transmit+0x228>)
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f001 ff25 	bl	8003540 <I2C_TransferConfig>
 80016f6:	e066      	b.n	80017c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_I2C_Master_Transmit+0x228>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f001 ff1a 	bl	8003540 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800170c:	e05b      	b.n	80017c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	6a39      	ldr	r1, [r7, #32]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f001 fd1e 	bl	8003154 <I2C_WaitOnTXISFlagUntilTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e07b      	b.n	800181a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173c:	b29b      	uxth	r3, r3
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d034      	beq.n	80017c6 <HAL_I2C_Master_Transmit+0x1ca>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d130      	bne.n	80017c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f001 fc97 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e04d      	b.n	800181a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d90e      	bls.n	80017a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f001 fece 	bl	8003540 <I2C_TransferConfig>
 80017a4:	e00f      	b.n	80017c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	8979      	ldrh	r1, [r7, #10]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f001 febd 	bl	8003540 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d19e      	bne.n	800170e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	6a39      	ldr	r1, [r7, #32]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f001 fd04 	bl	80031e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e01a      	b.n	800181a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2220      	movs	r2, #32
 80017ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6859      	ldr	r1, [r3, #4]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_I2C_Master_Transmit+0x22c>)
 80017f8:	400b      	ands	r3, r1
 80017fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e000      	b.n	800181a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001818:	2302      	movs	r3, #2
  }
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	80002000 	.word	0x80002000
 8001828:	fe00e800 	.word	0xfe00e800

0800182c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af02      	add	r7, sp, #8
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
 800183c:	4613      	mov	r3, r2
 800183e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b20      	cmp	r3, #32
 800184a:	f040 80db 	bne.w	8001a04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2C_Master_Receive+0x30>
 8001858:	2302      	movs	r3, #2
 800185a:	e0d4      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001864:	f7ff fb10 	bl	8000e88 <HAL_GetTick>
 8001868:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2319      	movs	r3, #25
 8001870:	2201      	movs	r2, #1
 8001872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f001 fc13 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0bf      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2222      	movs	r2, #34	; 0x22
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2210      	movs	r2, #16
 8001892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	893a      	ldrh	r2, [r7, #8]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	2bff      	cmp	r3, #255	; 0xff
 80018b6:	d90e      	bls.n	80018d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	8979      	ldrh	r1, [r7, #10]
 80018c6:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_I2C_Master_Receive+0x1e4>)
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f001 fe36 	bl	8003540 <I2C_TransferConfig>
 80018d4:	e06d      	b.n	80019b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	8979      	ldrh	r1, [r7, #10]
 80018e8:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_I2C_Master_Receive+0x1e4>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f001 fe25 	bl	8003540 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018f6:	e05c      	b.n	80019b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	6a39      	ldr	r1, [r7, #32]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f001 fcb3 	bl	8003268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e07c      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001928:	3b01      	subs	r3, #1
 800192a:	b29a      	uxth	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	3b01      	subs	r3, #1
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d034      	beq.n	80019b2 <HAL_I2C_Master_Receive+0x186>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194c:	2b00      	cmp	r3, #0
 800194e:	d130      	bne.n	80019b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2200      	movs	r2, #0
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f001 fba1 	bl	80030a2 <I2C_WaitOnFlagUntilTimeout>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e04d      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196e:	b29b      	uxth	r3, r3
 8001970:	2bff      	cmp	r3, #255	; 0xff
 8001972:	d90e      	bls.n	8001992 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	b2da      	uxtb	r2, r3
 8001980:	8979      	ldrh	r1, [r7, #10]
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f001 fdd8 	bl	8003540 <I2C_TransferConfig>
 8001990:	e00f      	b.n	80019b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	8979      	ldrh	r1, [r7, #10]
 80019a4:	2300      	movs	r3, #0
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f001 fdc7 	bl	8003540 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d19d      	bne.n	80018f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	6a39      	ldr	r1, [r7, #32]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f001 fc0e 	bl	80031e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e01a      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2220      	movs	r2, #32
 80019d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6859      	ldr	r1, [r3, #4]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <HAL_I2C_Master_Receive+0x1e8>)
 80019e4:	400b      	ands	r3, r1
 80019e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	80002400 	.word	0x80002400
 8001a14:	fe00e800 	.word	0xfe00e800

08001a18 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b20      	cmp	r3, #32
 8001a30:	d156      	bne.n	8001ae0 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2C_Slave_Transmit_IT+0x28>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e050      	b.n	8001ae2 <HAL_I2C_Slave_Transmit_IT+0xca>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2221      	movs	r2, #33	; 0x21
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a98:	d117      	bne.n	8001aca <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001ad2:	f248 0101 	movw	r1, #32769	; 0x8001
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f001 fd64 	bl	80035a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e000      	b.n	8001ae2 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
  }
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	ffff0000 	.word	0xffff0000
 8001af0:	08001e9b 	.word	0x08001e9b

08001af4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	4613      	mov	r3, r2
 8001b00:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b20      	cmp	r3, #32
 8001b0c:	d139      	bne.n	8001b82 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_I2C_Slave_Receive_IT+0x28>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e033      	b.n	8001b84 <HAL_I2C_Slave_Receive_IT+0x90>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2222      	movs	r2, #34	; 0x22
 8001b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b48:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	68ba      	ldr	r2, [r7, #8]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_I2C_Slave_Receive_IT+0x98>)
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001b74:	f248 0102 	movw	r1, #32770	; 0x8002
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f001 fd13 	bl	80035a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001b82:	2302      	movs	r3, #2
  }
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	ffff0000 	.word	0xffff0000
 8001b90:	08001e9b 	.word	0x08001e9b

08001b94 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001bb0:	2b28      	cmp	r3, #40	; 0x28
 8001bb2:	f040 8098 	bne.w	8001ce6 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e08c      	b.n	8001ce8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001bce:	f248 0101 	movw	r1, #32769	; 0x8001
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f001 fd6a 	bl	80036ac <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e080      	b.n	8001ce8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8001bf8:	d12a      	bne.n	8001c50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f001 fd55 	bl	80036ac <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c10:	d11e      	bne.n	8001c50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c20:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d012      	beq.n	8001c50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001c30:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fa67 	bl	800110a <HAL_DMA_Abort_IT>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2229      	movs	r2, #41	; 0x29
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c74:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	88fa      	ldrh	r2, [r7, #6]
 8001c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8001c96:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	bf0c      	ite	eq
 8001ca6:	2301      	moveq	r3, #1
 8001ca8:	2300      	movne	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001cd8:	f248 0101 	movw	r1, #32769	; 0x8001
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f001 fc61 	bl	80035a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
  }
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	08003067 	.word	0x08003067
 8001cf4:	08001e9b 	.word	0x08001e9b

08001cf8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d10d      	bne.n	8001d28 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2228      	movs	r2, #40	; 0x28
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_I2C_EnableListen_IT+0x3c>)
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f001 fc40 	bl	80035a4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	08001e9b 	.word	0x08001e9b

08001d38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	68f9      	ldr	r1, [r7, #12]
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
  }
}
 8001d64:	bf00      	nop
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00f      	beq.n	8001dae <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00a      	beq.n	8001dae <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00f      	beq.n	8001dd8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00a      	beq.n	8001dd8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f043 0208 	orr.w	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dd6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00f      	beq.n	8001e02 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00a      	beq.n	8001e02 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f043 0202 	orr.w	r2, r3, #2
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e00:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 030b 	and.w	r3, r3, #11
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001e12:	68f9      	ldr	r1, [r7, #12]
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 ffeb 	bl	8002df0 <I2C_ITError>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <I2C_Slave_ISR_IT+0x24>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e0e2      	b.n	8002084 <I2C_Slave_ISR_IT+0x1ea>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001eda:	6939      	ldr	r1, [r7, #16]
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fdcf 	bl	8002a80 <I2C_ITSlaveCplt>
 8001ee2:	e0ca      	b.n	800207a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04b      	beq.n	8001f86 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d046      	beq.n	8001f86 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d128      	bne.n	8001f54 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b28      	cmp	r3, #40	; 0x28
 8001f0c:	d108      	bne.n	8001f20 <I2C_Slave_ISR_IT+0x86>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f14:	d104      	bne.n	8001f20 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f16:	6939      	ldr	r1, [r7, #16]
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f000 ff15 	bl	8002d48 <I2C_ITListenCplt>
 8001f1e:	e031      	b.n	8001f84 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b29      	cmp	r3, #41	; 0x29
 8001f2a:	d10e      	bne.n	8001f4a <I2C_Slave_ISR_IT+0xb0>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f32:	d00a      	beq.n	8001f4a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f001 f86e 	bl	800301e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fc78 	bl	8002838 <I2C_ITSlaveSeqCplt>
 8001f48:	e01c      	b.n	8001f84 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2210      	movs	r2, #16
 8001f50:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001f52:	e08f      	b.n	8002074 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2210      	movs	r2, #16
 8001f5a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <I2C_Slave_ISR_IT+0xdc>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d17e      	bne.n	8002074 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f000 ff37 	bl	8002df0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001f82:	e077      	b.n	8002074 <I2C_Slave_ISR_IT+0x1da>
 8001f84:	e076      	b.n	8002074 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d02f      	beq.n	8001ff0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d02a      	beq.n	8001ff0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d018      	beq.n	8001fd6 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d14b      	bne.n	8002078 <I2C_Slave_ISR_IT+0x1de>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fe6:	d047      	beq.n	8002078 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 fc25 	bl	8002838 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001fee:	e043      	b.n	8002078 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002004:	6939      	ldr	r1, [r7, #16]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fb55 	bl	80026b6 <I2C_ITAddrCplt>
 800200c:	e035      	b.n	800207a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d030      	beq.n	800207a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800201e:	2b00      	cmp	r3, #0
 8002020:	d02b      	beq.n	800207a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d018      	beq.n	800205e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002030:	781a      	ldrb	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b29a      	uxth	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
 800205c:	e00d      	b.n	800207a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d002      	beq.n	800206c <I2C_Slave_ISR_IT+0x1d2>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fbe3 	bl	8002838 <I2C_ITSlaveSeqCplt>
 8002072:	e002      	b.n	800207a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002074:	bf00      	nop
 8002076:	e000      	b.n	800207a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002078:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af02      	add	r7, sp, #8
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <I2C_Master_ISR_DMA+0x1a>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0e7      	b.n	8002276 <I2C_Master_ISR_DMA+0x1ea>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d016      	beq.n	80020e6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d011      	beq.n	80020e6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2210      	movs	r2, #16
 80020c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f043 0204 	orr.w	r2, r3, #4
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80020d6:	2120      	movs	r1, #32
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f001 fa63 	bl	80035a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 ff9d 	bl	800301e <I2C_Flush_TXDR>
 80020e4:	e0c2      	b.n	800226c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d07f      	beq.n	80021f0 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d07a      	beq.n	80021f0 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002108:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05c      	beq.n	80021ce <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002120:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	2bff      	cmp	r3, #255	; 0xff
 800212a:	d914      	bls.n	8002156 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d103      	bne.n	8002148 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
 8002146:	e002      	b.n	800214e <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	22ff      	movs	r2, #255	; 0xff
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800214e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e010      	b.n	8002178 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002168:	d003      	beq.n	8002172 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e002      	b.n	8002178 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002176:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	b2da      	uxtb	r2, r3
 800217e:	8a79      	ldrh	r1, [r7, #18]
 8002180:	2300      	movs	r3, #0
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f001 f9da 	bl	8003540 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29a      	uxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b22      	cmp	r3, #34	; 0x22
 80021a8:	d108      	bne.n	80021bc <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80021ba:	e057      	b.n	800226c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021ca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80021cc:	e04e      	b.n	800226c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021dc:	d003      	beq.n	80021e6 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 faed 	bl	80027be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80021e4:	e042      	b.n	800226c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80021e6:	2140      	movs	r1, #64	; 0x40
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fe01 	bl	8002df0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80021ee:	e03d      	b.n	800226c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d028      	beq.n	800224c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002200:	2b00      	cmp	r3, #0
 8002202:	d023      	beq.n	800224c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d119      	bne.n	8002242 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800221c:	d025      	beq.n	800226a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002226:	d108      	bne.n	800223a <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002236:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002238:	e017      	b.n	800226a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fabf 	bl	80027be <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002240:	e013      	b.n	800226a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002242:	2140      	movs	r1, #64	; 0x40
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 fdd3 	bl	8002df0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800224a:	e00e      	b.n	800226a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb44 	bl	80028f0 <I2C_ITMasterCplt>
 8002268:	e000      	b.n	800226c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800226a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800228c:	4b90      	ldr	r3, [pc, #576]	; (80024d0 <I2C_Mem_ISR_DMA+0x250>)
 800228e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <I2C_Mem_ISR_DMA+0x1e>
 800229a:	2302      	movs	r3, #2
 800229c:	e12f      	b.n	80024fe <I2C_Mem_ISR_DMA+0x27e>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d016      	beq.n	80022de <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d011      	beq.n	80022de <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2210      	movs	r2, #16
 80022c0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f043 0204 	orr.w	r2, r3, #4
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80022ce:	2120      	movs	r1, #32
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f001 f967 	bl	80035a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fea1 	bl	800301e <I2C_Flush_TXDR>
 80022dc:	e10a      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00e      	beq.n	8002306 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d009      	beq.n	8002306 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002302:	651a      	str	r2, [r3, #80]	; 0x50
 8002304:	e0f6      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d06d      	beq.n	80023ec <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002316:	2b00      	cmp	r3, #0
 8002318:	d068      	beq.n	80023ec <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800231a:	2101      	movs	r1, #1
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f001 f9c5 	bl	80036ac <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002322:	2110      	movs	r1, #16
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f001 f93d 	bl	80035a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d056      	beq.n	80023e2 <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d91e      	bls.n	800237c <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d103      	bne.n	800235a <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2201      	movs	r2, #1
 8002356:	851a      	strh	r2, [r3, #40]	; 0x28
 8002358:	e002      	b.n	8002360 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	b299      	uxth	r1, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	b2da      	uxtb	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f001 f8e3 	bl	8003540 <I2C_TransferConfig>
 800237a:	e011      	b.n	80023a0 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	b299      	uxth	r1, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	b2da      	uxtb	r2, r3
 8002392:	2300      	movs	r3, #0
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f001 f8d0 	bl	8003540 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b22      	cmp	r3, #34	; 0x22
 80023bc:	d108      	bne.n	80023d0 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023ce:	e091      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80023e0:	e088      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80023e2:	2140      	movs	r1, #64	; 0x40
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fd03 	bl	8002df0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80023ea:	e083      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d070      	beq.n	80024d8 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d06b      	beq.n	80024d8 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002400:	2101      	movs	r1, #1
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f001 f952 	bl	80036ac <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002408:	2110      	movs	r1, #16
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f001 f8ca 	bl	80035a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b22      	cmp	r3, #34	; 0x22
 800241a:	d101      	bne.n	8002420 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <I2C_Mem_ISR_DMA+0x254>)
 800241e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d91e      	bls.n	8002468 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b01      	cmp	r3, #1
 800243c:	d103      	bne.n	8002446 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
 8002444:	e002      	b.n	800244c <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002450:	b299      	uxth	r1, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f001 f86d 	bl	8003540 <I2C_TransferConfig>
 8002466:	e011      	b.n	800248c <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	b299      	uxth	r1, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f001 f85a 	bl	8003540 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b22      	cmp	r3, #34	; 0x22
 80024a8:	d108      	bne.n	80024bc <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024ba:	e01b      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ca:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024cc:	e012      	b.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
 80024ce:	bf00      	nop
 80024d0:	80002000 	.word	0x80002000
 80024d4:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f9fe 	bl	80028f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop

08002508 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <I2C_Slave_ISR_DMA+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e0c0      	b.n	80026ae <I2C_Slave_ISR_DMA+0x1a6>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fa98 	bl	8002a80 <I2C_ITSlaveCplt>
 8002550:	e0a8      	b.n	80026a4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8095 	beq.w	8002688 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 808f 	beq.w	8002688 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	d07d      	beq.n	800267a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800259c:	2301      	movs	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00c      	beq.n	80025c2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d128      	bne.n	800261a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b28      	cmp	r3, #40	; 0x28
 80025d2:	d108      	bne.n	80025e6 <I2C_Slave_ISR_DMA+0xde>
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025da:	d104      	bne.n	80025e6 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fbb2 	bl	8002d48 <I2C_ITListenCplt>
 80025e4:	e048      	b.n	8002678 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b29      	cmp	r3, #41	; 0x29
 80025f0:	d10e      	bne.n	8002610 <I2C_Slave_ISR_DMA+0x108>
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025f8:	d00a      	beq.n	8002610 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2210      	movs	r2, #16
 8002600:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fd0b 	bl	800301e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f915 	bl	8002838 <I2C_ITSlaveSeqCplt>
 800260e:	e033      	b.n	8002678 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2210      	movs	r2, #16
 8002616:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002618:	e034      	b.n	8002684 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2210      	movs	r2, #16
 8002620:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f043 0204 	orr.w	r2, r3, #4
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <I2C_Slave_ISR_DMA+0x13c>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002642:	d11f      	bne.n	8002684 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b21      	cmp	r3, #33	; 0x21
 8002648:	d002      	beq.n	8002650 <I2C_Slave_ISR_DMA+0x148>
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b29      	cmp	r3, #41	; 0x29
 800264e:	d103      	bne.n	8002658 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2221      	movs	r2, #33	; 0x21
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
 8002656:	e008      	b.n	800266a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b22      	cmp	r3, #34	; 0x22
 800265c:	d002      	beq.n	8002664 <I2C_Slave_ISR_DMA+0x15c>
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b2a      	cmp	r3, #42	; 0x2a
 8002662:	d102      	bne.n	800266a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2222      	movs	r2, #34	; 0x22
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4619      	mov	r1, r3
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fbbd 	bl	8002df0 <I2C_ITError>
      if (treatdmanack == 1U)
 8002676:	e005      	b.n	8002684 <I2C_Slave_ISR_DMA+0x17c>
 8002678:	e004      	b.n	8002684 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2210      	movs	r2, #16
 8002680:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002682:	e00f      	b.n	80026a4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002684:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002686:	e00d      	b.n	80026a4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 f809 	bl	80026b6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026cc:	2b28      	cmp	r3, #40	; 0x28
 80026ce:	d16a      	bne.n	80027a6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80026ee:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	b29b      	uxth	r3, r3
 8002706:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800270a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d138      	bne.n	8002786 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	09db      	lsrs	r3, r3, #7
 8002718:	b29a      	uxth	r2, r3
 800271a:	89bb      	ldrh	r3, [r7, #12]
 800271c:	4053      	eors	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	f003 0306 	and.w	r3, r3, #6
 8002724:	2b00      	cmp	r3, #0
 8002726:	d11c      	bne.n	8002762 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273a:	2b02      	cmp	r3, #2
 800273c:	d13b      	bne.n	80027b6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2208      	movs	r2, #8
 800274a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002754:	89ba      	ldrh	r2, [r7, #12]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fd ff60 	bl	8000620 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002760:	e029      	b.n	80027b6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 ff9e 	bl	80036ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002778:	89ba      	ldrh	r2, [r7, #12]
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fd ff4e 	bl	8000620 <HAL_I2C_AddrCallback>
}
 8002784:	e017      	b.n	80027b6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 ff8e 	bl	80036ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002798:	89ba      	ldrh	r2, [r7, #12]
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fd ff3e 	bl	8000620 <HAL_I2C_AddrCallback>
}
 80027a4:	e007      	b.n	80027b6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2208      	movs	r2, #8
 80027ac:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b21      	cmp	r3, #33	; 0x21
 80027d8:	d115      	bne.n	8002806 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2211      	movs	r2, #17
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027ee:	2101      	movs	r1, #1
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 ff5b 	bl	80036ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fb0f 	bl	8001e22 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002804:	e014      	b.n	8002830 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2212      	movs	r2, #18
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800281a:	2102      	movs	r1, #2
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 ff45 	bl	80036ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fb03 	bl	8001e36 <HAL_I2C_MasterRxCpltCallback>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e00c      	b.n	8002886 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d007      	beq.n	8002886 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002884:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b29      	cmp	r3, #41	; 0x29
 8002890:	d112      	bne.n	80028b8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2228      	movs	r2, #40	; 0x28
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2221      	movs	r2, #33	; 0x21
 800289e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028a0:	2101      	movs	r1, #1
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 ff02 	bl	80036ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff faca 	bl	8001e4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028b6:	e017      	b.n	80028e8 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b2a      	cmp	r3, #42	; 0x2a
 80028c2:	d111      	bne.n	80028e8 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2228      	movs	r2, #40	; 0x28
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2222      	movs	r2, #34	; 0x22
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028d2:	2102      	movs	r1, #2
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fee9 	bl	80036ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fd fec6 	bl	8000674 <HAL_I2C_SlaveRxCpltCallback>
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2220      	movs	r2, #32
 8002904:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b21      	cmp	r3, #33	; 0x21
 8002910:	d107      	bne.n	8002922 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002912:	2101      	movs	r1, #1
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 fec9 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2211      	movs	r2, #17
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
 8002920:	e00c      	b.n	800293c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b22      	cmp	r3, #34	; 0x22
 800292c:	d106      	bne.n	800293c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800292e:	2102      	movs	r1, #2
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 febb 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2212      	movs	r2, #18
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <I2C_ITMasterCplt+0x188>)
 8002948:	400b      	ands	r3, r1
 800294a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <I2C_ITMasterCplt+0x18c>)
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	f043 0204 	orr.w	r2, r3, #4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b60      	cmp	r3, #96	; 0x60
 8002980:	d10a      	bne.n	8002998 <I2C_ITMasterCplt+0xa8>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	b2db      	uxtb	r3, r3
 8002994:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002996:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fb40 	bl	800301e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d002      	beq.n	80029b6 <I2C_ITMasterCplt+0xc6>
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d006      	beq.n	80029c4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fa17 	bl	8002df0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80029c2:	e054      	b.n	8002a6e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b21      	cmp	r3, #33	; 0x21
 80029ce:	d124      	bne.n	8002a1a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d10b      	bne.n	8002a02 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fa2f 	bl	8001e5e <HAL_I2C_MemTxCpltCallback>
}
 8002a00:	e035      	b.n	8002a6e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fa05 	bl	8001e22 <HAL_I2C_MasterTxCpltCallback>
}
 8002a18:	e029      	b.n	8002a6e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b22      	cmp	r3, #34	; 0x22
 8002a24:	d123      	bne.n	8002a6e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d10b      	bne.n	8002a58 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fa0e 	bl	8001e72 <HAL_I2C_MemRxCpltCallback>
}
 8002a56:	e00a      	b.n	8002a6e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff f9e4 	bl	8001e36 <HAL_I2C_MasterRxCpltCallback>
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	fe00e800 	.word	0xfe00e800
 8002a7c:	ffff0000 	.word	0xffff0000

08002a80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002aac:	7afb      	ldrb	r3, [r7, #11]
 8002aae:	2b21      	cmp	r3, #33	; 0x21
 8002ab0:	d002      	beq.n	8002ab8 <I2C_ITSlaveCplt+0x38>
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	2b29      	cmp	r3, #41	; 0x29
 8002ab6:	d108      	bne.n	8002aca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002ab8:	f248 0101 	movw	r1, #32769	; 0x8001
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fdf5 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2221      	movs	r2, #33	; 0x21
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac8:	e019      	b.n	8002afe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002aca:	7afb      	ldrb	r3, [r7, #11]
 8002acc:	2b22      	cmp	r3, #34	; 0x22
 8002ace:	d002      	beq.n	8002ad6 <I2C_ITSlaveCplt+0x56>
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
 8002ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad4:	d108      	bne.n	8002ae8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ad6:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fde6 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2222      	movs	r2, #34	; 0x22
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae6:	e00a      	b.n	8002afe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002ae8:	7afb      	ldrb	r3, [r7, #11]
 8002aea:	2b28      	cmp	r3, #40	; 0x28
 8002aec:	d107      	bne.n	8002afe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002aee:	f248 0103 	movw	r1, #32771	; 0x8003
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fdda 	bl	80036ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <I2C_ITSlaveCplt+0x2c0>)
 8002b1a:	400b      	ands	r3, r1
 8002b1c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa7d 	bl	800301e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d013      	beq.n	8002b56 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01f      	beq.n	8002b86 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b54:	e017      	b.n	8002b86 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b6e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d020      	beq.n	8002bd2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f043 0204 	orr.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d049      	beq.n	8002c86 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d044      	beq.n	8002c86 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d128      	bne.n	8002c58 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b28      	cmp	r3, #40	; 0x28
 8002c10:	d108      	bne.n	8002c24 <I2C_ITSlaveCplt+0x1a4>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c18:	d104      	bne.n	8002c24 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f893 	bl	8002d48 <I2C_ITListenCplt>
 8002c22:	e030      	b.n	8002c86 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b29      	cmp	r3, #41	; 0x29
 8002c2e:	d10e      	bne.n	8002c4e <I2C_ITSlaveCplt+0x1ce>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c36:	d00a      	beq.n	8002c4e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f9ec 	bl	800301e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff fdf6 	bl	8002838 <I2C_ITSlaveSeqCplt>
 8002c4c:	e01b      	b.n	8002c86 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2210      	movs	r2, #16
 8002c54:	61da      	str	r2, [r3, #28]
 8002c56:	e016      	b.n	8002c86 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	f043 0204 	orr.w	r2, r3, #4
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <I2C_ITSlaveCplt+0x1fa>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c78:	d105      	bne.n	8002c86 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8b5 	bl	8002df0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8a4 	bl	8002df0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b28      	cmp	r3, #40	; 0x28
 8002cb2:	d141      	bne.n	8002d38 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cb4:	6979      	ldr	r1, [r7, #20]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f846 	bl	8002d48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cbc:	e03c      	b.n	8002d38 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc6:	d014      	beq.n	8002cf2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fdb5 	bl	8002838 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <I2C_ITSlaveCplt+0x2c4>)
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fc8c 	bl	8000608 <HAL_I2C_ListenCpltCallback>
}
 8002cf0:	e022      	b.n	8002d38 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b22      	cmp	r3, #34	; 0x22
 8002cfc:	d10e      	bne.n	8002d1c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fd fcad 	bl	8000674 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d1a:	e00d      	b.n	8002d38 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff f889 	bl	8001e4a <HAL_I2C_SlaveTxCpltCallback>
}
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	fe00e800 	.word	0xfe00e800
 8002d44:	ffff0000 	.word	0xffff0000

08002d48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a25      	ldr	r2, [pc, #148]	; (8002dec <I2C_ITListenCplt+0xa4>)
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d022      	beq.n	8002dc4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dc4:	f248 0103 	movw	r1, #32771	; 0x8003
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fc6f 	bl	80036ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd fc12 	bl	8000608 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	ffff0000 	.word	0xffff0000

08002df0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e00:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a6d      	ldr	r2, [pc, #436]	; (8002fc4 <I2C_ITError+0x1d4>)
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b28      	cmp	r3, #40	; 0x28
 8002e26:	d005      	beq.n	8002e34 <I2C_ITError+0x44>
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b29      	cmp	r3, #41	; 0x29
 8002e2c:	d002      	beq.n	8002e34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2b2a      	cmp	r3, #42	; 0x2a
 8002e32:	d10b      	bne.n	8002e4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e34:	2103      	movs	r1, #3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fc38 	bl	80036ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2228      	movs	r2, #40	; 0x28
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a60      	ldr	r2, [pc, #384]	; (8002fc8 <I2C_ITError+0x1d8>)
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4a:	e030      	b.n	8002eae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fc2b 	bl	80036ac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8e1 	bl	800301e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d01f      	beq.n	8002ea8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d114      	bne.n	8002ea8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d109      	bne.n	8002ea0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	f043 0204 	orr.w	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d039      	beq.n	8002f30 <I2C_ITError+0x140>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b11      	cmp	r3, #17
 8002ec0:	d002      	beq.n	8002ec8 <I2C_ITError+0xd8>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b21      	cmp	r3, #33	; 0x21
 8002ec6:	d133      	bne.n	8002f30 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed6:	d107      	bne.n	8002ee8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ee6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f92e 	bl	800114e <HAL_DMA_GetState>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d017      	beq.n	8002f28 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	4a33      	ldr	r2, [pc, #204]	; (8002fcc <I2C_ITError+0x1dc>)
 8002efe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe f8fc 	bl	800110a <HAL_DMA_Abort_IT>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d04d      	beq.n	8002fb4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f22:	4610      	mov	r0, r2
 8002f24:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f26:	e045      	b.n	8002fb4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f851 	bl	8002fd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f2e:	e041      	b.n	8002fb4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d039      	beq.n	8002fac <I2C_ITError+0x1bc>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d002      	beq.n	8002f44 <I2C_ITError+0x154>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b22      	cmp	r3, #34	; 0x22
 8002f42:	d133      	bne.n	8002fac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f52:	d107      	bne.n	8002f64 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe f8f0 	bl	800114e <HAL_DMA_GetState>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d017      	beq.n	8002fa4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <I2C_ITError+0x1dc>)
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f8be 	bl	800110a <HAL_DMA_Abort_IT>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d011      	beq.n	8002fb8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa2:	e009      	b.n	8002fb8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f813 	bl	8002fd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002faa:	e005      	b.n	8002fb8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f80f 	bl	8002fd0 <I2C_TreatErrorCallback>
  }
}
 8002fb2:	e002      	b.n	8002fba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fb8:	bf00      	nop
}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	ffff0000 	.word	0xffff0000
 8002fc8:	08001e9b 	.word	0x08001e9b
 8002fcc:	08003067 	.word	0x08003067

08002fd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b60      	cmp	r3, #96	; 0x60
 8002fe2:	d10e      	bne.n	8003002 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe ff43 	bl	8001e86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003000:	e009      	b.n	8003016 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fd fb41 	bl	8000698 <HAL_I2C_ErrorCallback>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b02      	cmp	r3, #2
 8003032:	d103      	bne.n	800303c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2200      	movs	r2, #0
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	d007      	beq.n	800305a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	619a      	str	r2, [r3, #24]
  }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	2200      	movs	r2, #0
 8003082:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	2200      	movs	r2, #0
 8003092:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff ff9b 	bl	8002fd0 <I2C_TreatErrorCallback>
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b084      	sub	sp, #16
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b2:	e03b      	b.n	800312c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	6839      	ldr	r1, [r7, #0]
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f961 	bl	8003380 <I2C_IsErrorOccurred>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e041      	b.n	800314c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ce:	d02d      	beq.n	800312c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d0:	f7fd feda 	bl	8000e88 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d302      	bcc.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d122      	bne.n	800312c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	429a      	cmp	r2, r3
 8003102:	d113      	bne.n	800312c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e00f      	b.n	800314c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	429a      	cmp	r2, r3
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	429a      	cmp	r2, r3
 8003148:	d0b4      	beq.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003160:	e033      	b.n	80031ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f90a 	bl	8003380 <I2C_IsErrorOccurred>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e031      	b.n	80031da <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d025      	beq.n	80031ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fd fe83 	bl	8000e88 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11a      	bne.n	80031ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d013      	beq.n	80031ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e007      	b.n	80031da <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d1c4      	bne.n	8003162 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ee:	e02f      	b.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f8c3 	bl	8003380 <I2C_IsErrorOccurred>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e02d      	b.n	8003260 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003204:	f7fd fe40 	bl	8000e88 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11a      	bne.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b20      	cmp	r3, #32
 8003226:	d013      	beq.n	8003250 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e007      	b.n	8003260 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b20      	cmp	r3, #32
 800325c:	d1c8      	bne.n	80031f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003278:	e071      	b.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f87e 	bl	8003380 <I2C_IsErrorOccurred>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b20      	cmp	r3, #32
 800329a:	d13b      	bne.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d138      	bne.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d105      	bne.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d121      	bne.n	800330e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2204      	movs	r2, #4
 80032d6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2220      	movs	r2, #32
 80032de:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80032ec:	400b      	ands	r3, r1
 80032ee:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	75fb      	strb	r3, [r7, #23]
 800330c:	e002      	b.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003314:	f7fd fdb8 	bl	8000e88 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	429a      	cmp	r2, r3
 8003322:	d302      	bcc.n	800332a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d119      	bne.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d116      	bne.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b04      	cmp	r3, #4
 800333c:	d00f      	beq.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f043 0220 	orr.w	r2, r3, #32
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d002      	beq.n	8003372 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d083      	beq.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003372:	7dfb      	ldrb	r3, [r7, #23]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d068      	beq.n	800347e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2210      	movs	r2, #16
 80033b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033b4:	e049      	b.n	800344a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033bc:	d045      	beq.n	800344a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fd fd63 	bl	8000e88 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_IsErrorOccurred+0x54>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d13a      	bne.n	800344a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f6:	d121      	bne.n	800343c <I2C_IsErrorOccurred+0xbc>
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fe:	d01d      	beq.n	800343c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003400:	7cfb      	ldrb	r3, [r7, #19]
 8003402:	2b20      	cmp	r3, #32
 8003404:	d01a      	beq.n	800343c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003414:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003416:	f7fd fd37 	bl	8000e88 <HAL_GetTick>
 800341a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800341c:	e00e      	b.n	800343c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800341e:	f7fd fd33 	bl	8000e88 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b19      	cmp	r3, #25
 800342a:	d907      	bls.n	800343c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	f043 0320 	orr.w	r3, r3, #32
 8003432:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800343a:	e006      	b.n	800344a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d1e9      	bne.n	800341e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b20      	cmp	r3, #32
 8003456:	d003      	beq.n	8003460 <I2C_IsErrorOccurred+0xe0>
 8003458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0aa      	beq.n	80033b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2220      	movs	r2, #32
 800346e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	f043 0308 	orr.w	r3, r3, #8
 80034b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01c      	beq.n	800352e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff fd92 	bl	800301e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6859      	ldr	r1, [r3, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <I2C_IsErrorOccurred+0x1bc>)
 8003506:	400b      	ands	r3, r1
 8003508:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	431a      	orrs	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800352e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003532:	4618      	mov	r0, r3
 8003534:	3728      	adds	r7, #40	; 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	fe00e800 	.word	0xfe00e800

08003540 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	460b      	mov	r3, r1
 800354c:	817b      	strh	r3, [r7, #10]
 800354e:	4613      	mov	r3, r2
 8003550:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003558:	7a7b      	ldrb	r3, [r7, #9]
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003560:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	4313      	orrs	r3, r2
 800356a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800356e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	0d5b      	lsrs	r3, r3, #21
 800357a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <I2C_TransferConfig+0x60>)
 8003580:	430b      	orrs	r3, r1
 8003582:	43db      	mvns	r3, r3
 8003584:	ea02 0103 	and.w	r1, r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003592:	bf00      	nop
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	03ff63ff 	.word	0x03ff63ff

080035a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <I2C_Enable_IRQ+0xfc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d032      	beq.n	8003624 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80035c2:	4a38      	ldr	r2, [pc, #224]	; (80036a4 <I2C_Enable_IRQ+0x100>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02d      	beq.n	8003624 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80035cc:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <I2C_Enable_IRQ+0x104>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d028      	beq.n	8003624 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da03      	bge.n	80035e2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80035f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035f4:	887b      	ldrh	r3, [r7, #2]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003604:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003606:	887b      	ldrh	r3, [r7, #2]
 8003608:	2b10      	cmp	r3, #16
 800360a:	d103      	bne.n	8003614 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003612:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	2b20      	cmp	r3, #32
 8003618:	d133      	bne.n	8003682 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f043 0320 	orr.w	r3, r3, #32
 8003620:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003622:	e02e      	b.n	8003682 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003628:	2b00      	cmp	r3, #0
 800362a:	da03      	bge.n	8003634 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003632:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003634:	887b      	ldrh	r3, [r7, #2]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003644:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003656:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	2b10      	cmp	r3, #16
 800365c:	d103      	bne.n	8003666 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003664:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	2b20      	cmp	r3, #32
 800366a:	d103      	bne.n	8003674 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003672:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d103      	bne.n	8003682 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003680:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6819      	ldr	r1, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	430a      	orrs	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	0800208d 	.word	0x0800208d
 80036a4:	08002509 	.word	0x08002509
 80036a8:	08002281 	.word	0x08002281

080036ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036bc:	887b      	ldrh	r3, [r7, #2]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00f      	beq.n	80036e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80036cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036da:	2b28      	cmp	r3, #40	; 0x28
 80036dc:	d003      	beq.n	80036e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80036e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00f      	beq.n	8003710 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80036f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003704:	2b28      	cmp	r3, #40	; 0x28
 8003706:	d003      	beq.n	8003710 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800370e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003714:	2b00      	cmp	r3, #0
 8003716:	da03      	bge.n	8003720 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800371e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	2b10      	cmp	r3, #16
 8003724:	d103      	bne.n	800372e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800372c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	2b20      	cmp	r3, #32
 8003732:	d103      	bne.n	800373c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800373c:	887b      	ldrh	r3, [r7, #2]
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d103      	bne.n	800374a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003748:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	43da      	mvns	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	400a      	ands	r2, r1
 800375a:	601a      	str	r2, [r3, #0]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	d138      	bne.n	80037f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003788:	2302      	movs	r3, #2
 800378a:	e032      	b.n	80037f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	e000      	b.n	80037f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037f0:	2302      	movs	r3, #2
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b20      	cmp	r3, #32
 8003812:	d139      	bne.n	8003888 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800381e:	2302      	movs	r3, #2
 8003820:	e033      	b.n	800388a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	; 0x24
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003850:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e291      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8087 	beq.w	80039ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038bc:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d00c      	beq.n	80038e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038c8:	4b93      	ldr	r3, [pc, #588]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d112      	bne.n	80038fa <HAL_RCC_OscConfig+0x62>
 80038d4:	4b90      	ldr	r3, [pc, #576]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e0:	d10b      	bne.n	80038fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e2:	4b8d      	ldr	r3, [pc, #564]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d06c      	beq.n	80039c8 <HAL_RCC_OscConfig+0x130>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d168      	bne.n	80039c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e26b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003902:	d106      	bne.n	8003912 <HAL_RCC_OscConfig+0x7a>
 8003904:	4b84      	ldr	r3, [pc, #528]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a83      	ldr	r2, [pc, #524]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800390a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	e02e      	b.n	8003970 <HAL_RCC_OscConfig+0xd8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10c      	bne.n	8003934 <HAL_RCC_OscConfig+0x9c>
 800391a:	4b7f      	ldr	r3, [pc, #508]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7e      	ldr	r2, [pc, #504]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b7c      	ldr	r3, [pc, #496]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a7b      	ldr	r2, [pc, #492]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800392c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e01d      	b.n	8003970 <HAL_RCC_OscConfig+0xd8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0xc0>
 800393e:	4b76      	ldr	r3, [pc, #472]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a75      	ldr	r2, [pc, #468]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a72      	ldr	r2, [pc, #456]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0xd8>
 8003958:	4b6f      	ldr	r3, [pc, #444]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6e      	ldr	r2, [pc, #440]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800395e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	4b6c      	ldr	r3, [pc, #432]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a6b      	ldr	r2, [pc, #428]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 800396a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800396e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fd fa86 	bl	8000e88 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003980:	f7fd fa82 	bl	8000e88 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e21f      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f0      	beq.n	8003980 <HAL_RCC_OscConfig+0xe8>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a0:	f7fd fa72 	bl	8000e88 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a8:	f7fd fa6e 	bl	8000e88 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e20b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x110>
 80039c6:	e000      	b.n	80039ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d069      	beq.n	8003aaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039d6:	4b50      	ldr	r3, [pc, #320]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e2:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	2b08      	cmp	r3, #8
 80039ec:	d11c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x190>
 80039ee:	4b4a      	ldr	r3, [pc, #296]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d116      	bne.n	8003a28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e1df      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a12:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	493d      	ldr	r1, [pc, #244]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	e040      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d023      	beq.n	8003a78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a38      	ldr	r2, [pc, #224]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fd fa24 	bl	8000e88 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fd fa20 	bl	8000e88 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e1bd      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a56:	4b30      	ldr	r3, [pc, #192]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a62:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4929      	ldr	r1, [pc, #164]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]
 8003a76:	e018      	b.n	8003aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fa00 	bl	8000e88 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a8c:	f7fd f9fc 	bl	8000e88 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e199      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d038      	beq.n	8003b28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d019      	beq.n	8003af2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd f9dd 	bl	8000e88 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fd f9d9 	bl	8000e88 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e176      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x23a>
 8003af0:	e01a      	b.n	8003b28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <HAL_RCC_OscConfig+0x280>)
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7fd f9c3 	bl	8000e88 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	e00a      	b.n	8003b1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b06:	f7fd f9bf 	bl	8000e88 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d903      	bls.n	8003b1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e15c      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
 8003b18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b1c:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003b1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ee      	bne.n	8003b06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80a4 	beq.w	8003c7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a87      	ldr	r2, [pc, #540]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b85      	ldr	r3, [pc, #532]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b5e:	4b82      	ldr	r3, [pc, #520]	; (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	; (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fd f987 	bl	8000e88 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd f983 	bl	8000e88 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e120      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b90:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x31a>
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e02d      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x33c>
 8003bba:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a66      	ldr	r2, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bcc:	f023 0304 	bic.w	r3, r3, #4
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d10c      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x35e>
 8003bdc:	4b61      	ldr	r3, [pc, #388]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be0:	4a60      	ldr	r2, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003be2:	f043 0304 	orr.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	; 0x70
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a5d      	ldr	r2, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	e00b      	b.n	8003c0e <HAL_RCC_OscConfig+0x376>
 8003bf6:	4b5b      	ldr	r3, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a5a      	ldr	r2, [pc, #360]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
 8003c02:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c06:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fd f937 	bl	8000e88 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fd f933 	bl	8000e88 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0ce      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ee      	beq.n	8003c1e <HAL_RCC_OscConfig+0x386>
 8003c40:	e014      	b.n	8003c6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c42:	f7fd f921 	bl	8000e88 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd f91d 	bl	8000e88 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0b8      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ee      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d105      	bne.n	8003c7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80a4 	beq.w	8003dd0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d06b      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d149      	bne.n	8003d30 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a30      	ldr	r2, [pc, #192]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd f8ee 	bl	8000e88 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd f8ea 	bl	8000e88 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e087      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	019b      	lsls	r3, r3, #6
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	041b      	lsls	r3, r3, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003cf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cfa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd f8be 	bl	8000e88 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd f8ba 	bl	8000e88 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e057      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x478>
 8003d2e:	e04f      	b.n	8003dd0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003d36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd f8a4 	bl	8000e88 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fd f8a0 	bl	8000e88 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e03d      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4ac>
 8003d62:	e035      	b.n	8003dd0 <HAL_RCC_OscConfig+0x538>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCC_OscConfig+0x544>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d028      	beq.n	8003dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d121      	bne.n	8003dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d11a      	bne.n	8003dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	3b01      	subs	r3, #1
 8003db6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0d0      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d910      	bls.n	8003e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b67      	ldr	r3, [pc, #412]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 020f 	bic.w	r2, r3, #15
 8003e0e:	4965      	ldr	r1, [pc, #404]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0b8      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e40:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a58      	ldr	r2, [pc, #352]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e58:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e64:	4b50      	ldr	r3, [pc, #320]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	494d      	ldr	r1, [pc, #308]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d040      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d115      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07f      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e073      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e06b      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4936      	ldr	r1, [pc, #216]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fc ffd8 	bl	8000e88 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fc ffd4 	bl	8000e88 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e053      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d210      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 020f 	bic.w	r2, r3, #15
 8003f1a:	4922      	ldr	r1, [pc, #136]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e032      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4916      	ldr	r1, [pc, #88]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	490e      	ldr	r1, [pc, #56]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f72:	f000 f821 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	490a      	ldr	r1, [pc, #40]	; (8003fac <HAL_RCC_ClockConfig+0x1cc>)
 8003f84:	5ccb      	ldrb	r3, [r1, r3]
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_RCC_ClockConfig+0x1d4>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fc ff34 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023c00 	.word	0x40023c00
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	0800638c 	.word	0x0800638c
 8003fb0:	20000008 	.word	0x20000008
 8003fb4:	2000000c 	.word	0x2000000c

08003fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fbc:	b094      	sub	sp, #80	; 0x50
 8003fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	2300      	movs	r3, #0
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd0:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	f200 80e1 	bhi.w	80041a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x34>
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fea:	e0db      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff0:	e0db      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff6:	e0d8      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004002:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d063      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	2200      	movs	r2, #0
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38
 8004018:	63fa      	str	r2, [r7, #60]	; 0x3c
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
 8004022:	2300      	movs	r3, #0
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
 8004026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	0159      	lsls	r1, r3, #5
 8004038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403c:	0150      	lsls	r0, r2, #5
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4621      	mov	r1, r4
 8004044:	1a51      	subs	r1, r2, r1
 8004046:	6139      	str	r1, [r7, #16]
 8004048:	4629      	mov	r1, r5
 800404a:	eb63 0301 	sbc.w	r3, r3, r1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800405c:	4659      	mov	r1, fp
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004066:	4651      	mov	r1, sl
 8004068:	018a      	lsls	r2, r1, #6
 800406a:	4651      	mov	r1, sl
 800406c:	ebb2 0801 	subs.w	r8, r2, r1
 8004070:	4659      	mov	r1, fp
 8004072:	eb63 0901 	sbc.w	r9, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb18 0303 	adds.w	r3, r8, r3
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	462b      	mov	r3, r5
 8004098:	eb49 0303 	adc.w	r3, r9, r3
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040aa:	4629      	mov	r1, r5
 80040ac:	024b      	lsls	r3, r1, #9
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b4:	4621      	mov	r1, r4
 80040b6:	024a      	lsls	r2, r1, #9
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c8:	f7fc f8f2 	bl	80002b0 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d4:	e058      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	2200      	movs	r2, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	4611      	mov	r1, r2
 80040e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0159      	lsls	r1, r3, #5
 80040fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004102:	0150      	lsls	r0, r2, #5
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4641      	mov	r1, r8
 800410a:	ebb2 0a01 	subs.w	sl, r2, r1
 800410e:	4649      	mov	r1, r9
 8004110:	eb63 0b01 	sbc.w	fp, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004128:	ebb2 040a 	subs.w	r4, r2, sl
 800412c:	eb63 050b 	sbc.w	r5, r3, fp
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	00eb      	lsls	r3, r5, #3
 800413a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413e:	00e2      	lsls	r2, r4, #3
 8004140:	4614      	mov	r4, r2
 8004142:	461d      	mov	r5, r3
 8004144:	4643      	mov	r3, r8
 8004146:	18e3      	adds	r3, r4, r3
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	464b      	mov	r3, r9
 800414c:	eb45 0303 	adc.w	r3, r5, r3
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415e:	4629      	mov	r1, r5
 8004160:	028b      	lsls	r3, r1, #10
 8004162:	4621      	mov	r1, r4
 8004164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004168:	4621      	mov	r1, r4
 800416a:	028a      	lsls	r2, r1, #10
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004172:	2200      	movs	r2, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	61fa      	str	r2, [r7, #28]
 8004178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417c:	f7fc f898 	bl	80002b0 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	3301      	adds	r3, #1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800419a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a2:	e002      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3750      	adds	r7, #80	; 0x50
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	007a1200 	.word	0x007a1200

080041c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000008 	.word	0x20000008

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800639c 	.word	0x0800639c

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800639c 	.word	0x0800639c

0800422c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b088      	sub	sp, #32
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d012      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004254:	4b69      	ldr	r3, [pc, #420]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4a68      	ldr	r2, [pc, #416]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800425e:	6093      	str	r3, [r2, #8]
 8004260:	4b66      	ldr	r3, [pc, #408]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004268:	4964      	ldr	r1, [pc, #400]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d017      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004286:	4b5d      	ldr	r3, [pc, #372]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800428c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	4959      	ldr	r1, [pc, #356]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a4:	d101      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d017      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042c2:	4b4e      	ldr	r3, [pc, #312]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d0:	494a      	ldr	r1, [pc, #296]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80042ee:	2301      	movs	r3, #1
 80042f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80042fe:	2301      	movs	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 808b 	beq.w	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	4a39      	ldr	r2, [pc, #228]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431a:	6413      	str	r3, [r2, #64]	; 0x40
 800431c:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a34      	ldr	r2, [pc, #208]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800432e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004334:	f7fc fda8 	bl	8000e88 <HAL_GetTick>
 8004338:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433c:	f7fc fda4 	bl	8000e88 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e357      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800434e:	4b2c      	ldr	r3, [pc, #176]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800435a:	4b28      	ldr	r3, [pc, #160]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d035      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	429a      	cmp	r2, r3
 8004376:	d02e      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004378:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004380:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004398:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800439a:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043a0:	4b16      	ldr	r3, [pc, #88]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d114      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ac:	f7fc fd6c 	bl	8000e88 <HAL_GetTick>
 80043b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fc fd68 	bl	8000e88 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e319      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e2:	d111      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80043f2:	400b      	ands	r3, r1
 80043f4:	4901      	ldr	r1, [pc, #4]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	608b      	str	r3, [r1, #8]
 80043fa:	e00b      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000
 8004404:	0ffffcff 	.word	0x0ffffcff
 8004408:	4baa      	ldr	r3, [pc, #680]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4aa9      	ldr	r2, [pc, #676]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	4ba7      	ldr	r3, [pc, #668]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	49a4      	ldr	r1, [pc, #656]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004422:	4313      	orrs	r3, r2
 8004424:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d010      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004432:	4ba0      	ldr	r3, [pc, #640]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004438:	4a9e      	ldr	r2, [pc, #632]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004442:	4b9c      	ldr	r3, [pc, #624]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004444:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444c:	4999      	ldr	r1, [pc, #612]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004460:	4b94      	ldr	r3, [pc, #592]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800446e:	4991      	ldr	r1, [pc, #580]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004482:	4b8c      	ldr	r3, [pc, #560]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004490:	4988      	ldr	r1, [pc, #544]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00a      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044a4:	4b83      	ldr	r3, [pc, #524]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	4980      	ldr	r1, [pc, #512]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044c6:	4b7b      	ldr	r3, [pc, #492]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4977      	ldr	r1, [pc, #476]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00a      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e8:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	496f      	ldr	r1, [pc, #444]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800450a:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f023 020c 	bic.w	r2, r3, #12
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	4966      	ldr	r1, [pc, #408]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800452c:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004532:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	495e      	ldr	r1, [pc, #376]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800454e:	4b59      	ldr	r3, [pc, #356]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455c:	4955      	ldr	r1, [pc, #340]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004570:	4b50      	ldr	r3, [pc, #320]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	494d      	ldr	r1, [pc, #308]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004592:	4b48      	ldr	r3, [pc, #288]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004598:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	4944      	ldr	r1, [pc, #272]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045b4:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c2:	493c      	ldr	r1, [pc, #240]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045d6:	4b37      	ldr	r3, [pc, #220]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e4:	4933      	ldr	r1, [pc, #204]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045f8:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004606:	492b      	ldr	r1, [pc, #172]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004628:	4922      	ldr	r1, [pc, #136]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004638:	d101      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800463a:	2301      	movs	r3, #1
 800463c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004668:	4912      	ldr	r1, [pc, #72]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468c:	4909      	ldr	r1, [pc, #36]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d006      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80d9 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046a8:	4b02      	ldr	r3, [pc, #8]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a01      	ldr	r2, [pc, #4]	; (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046b2:	e001      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ba:	f7fc fbe5 	bl	8000e88 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c0:	e008      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046c2:	f7fc fbe1 	bl	8000e88 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	; 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e194      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d4:	4b6c      	ldr	r3, [pc, #432]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d021      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d11d      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046f4:	4b64      	ldr	r3, [pc, #400]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046fa:	0c1b      	lsrs	r3, r3, #16
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004702:	4b61      	ldr	r3, [pc, #388]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004708:	0e1b      	lsrs	r3, r3, #24
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	019a      	lsls	r2, r3, #6
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	431a      	orrs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	071b      	lsls	r3, r3, #28
 8004728:	4957      	ldr	r1, [pc, #348]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02e      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800475a:	d129      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800475c:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800476a:	4b47      	ldr	r3, [pc, #284]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004770:	0f1b      	lsrs	r3, r3, #28
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	019a      	lsls	r2, r3, #6
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	061b      	lsls	r3, r3, #24
 800478a:	431a      	orrs	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	071b      	lsls	r3, r3, #28
 8004790:	493d      	ldr	r1, [pc, #244]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004798:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800479a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479e:	f023 021f 	bic.w	r2, r3, #31
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4937      	ldr	r1, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01d      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	0e1b      	lsrs	r3, r3, #24
 80047c4:	f003 030f 	and.w	r3, r3, #15
 80047c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d0:	0f1b      	lsrs	r3, r3, #28
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	019a      	lsls	r2, r3, #6
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	431a      	orrs	r2, r3
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	071b      	lsls	r3, r3, #28
 80047f0:	4925      	ldr	r1, [pc, #148]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d011      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	019a      	lsls	r2, r3, #6
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	061b      	lsls	r3, r3, #24
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	071b      	lsls	r3, r3, #28
 8004820:	4919      	ldr	r1, [pc, #100]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004828:	4b17      	ldr	r3, [pc, #92]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800482e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004834:	f7fc fb28 	bl	8000e88 <HAL_GetTick>
 8004838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800483c:	f7fc fb24 	bl	8000e88 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0d7      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800484e:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	f040 80cd 	bne.w	80049fc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004862:	4b09      	ldr	r3, [pc, #36]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fc fb0b 	bl	8000e88 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004876:	f7fc fb07 	bl	8000e88 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b64      	cmp	r3, #100	; 0x64
 8004882:	d903      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e0ba      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004888:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800488c:	4b5e      	ldr	r3, [pc, #376]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004898:	d0ed      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d02e      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d12a      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048d0:	4b4d      	ldr	r3, [pc, #308]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	0f1b      	lsrs	r3, r3, #28
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	019a      	lsls	r2, r3, #6
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	071b      	lsls	r3, r3, #28
 80048f6:	4944      	ldr	r1, [pc, #272]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048fe:	4b42      	ldr	r3, [pc, #264]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	493d      	ldr	r1, [pc, #244]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d022      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800492c:	d11d      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800492e:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	0e1b      	lsrs	r3, r3, #24
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	0f1b      	lsrs	r3, r3, #28
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	019a      	lsls	r2, r3, #6
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	041b      	lsls	r3, r3, #16
 8004956:	431a      	orrs	r2, r3
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	061b      	lsls	r3, r3, #24
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	4929      	ldr	r1, [pc, #164]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d028      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004976:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	019a      	lsls	r2, r3, #6
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	431a      	orrs	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	431a      	orrs	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	071b      	lsls	r3, r3, #28
 80049aa:	4917      	ldr	r1, [pc, #92]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4911      	ldr	r1, [pc, #68]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0e      	ldr	r2, [pc, #56]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fc fa58 	bl	8000e88 <HAL_GetTick>
 80049d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049dc:	f7fc fa54 	bl	8000e88 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b64      	cmp	r3, #100	; 0x64
 80049e8:	d901      	bls.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e007      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fa:	d1ef      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800

08004a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e040      	b.n	8004aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc f85c 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fb16 	bl	8005084 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8af 	bl	8004bbc <UART_SetConfig>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e01b      	b.n	8004aa0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb95 	bl	80051c8 <UART_CheckIdleState>
 8004a9e:	4603      	mov	r3, r0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	; 0x28
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d177      	bne.n	8004bb0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_UART_Transmit+0x24>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e070      	b.n	8004bb2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2221      	movs	r2, #33	; 0x21
 8004adc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ade:	f7fc f9d3 	bl	8000e88 <HAL_GetTick>
 8004ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	88fa      	ldrh	r2, [r7, #6]
 8004ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afc:	d108      	bne.n	8004b10 <HAL_UART_Transmit+0x68>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	61bb      	str	r3, [r7, #24]
 8004b0e:	e003      	b.n	8004b18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b18:	e02f      	b.n	8004b7a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2180      	movs	r1, #128	; 0x80
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 fba6 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e03b      	b.n	8004bb2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	3302      	adds	r3, #2
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	e007      	b.n	8004b68 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	781a      	ldrb	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3301      	adds	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1c9      	bne.n	8004b1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2140      	movs	r1, #64	; 0x40
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fb70 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d004      	beq.n	8004ba6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e005      	b.n	8004bb2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4ba6      	ldr	r3, [pc, #664]	; (8004e80 <UART_SetConfig+0x2c4>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	6979      	ldr	r1, [r7, #20]
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a94      	ldr	r2, [pc, #592]	; (8004e84 <UART_SetConfig+0x2c8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d120      	bne.n	8004c7a <UART_SetConfig+0xbe>
 8004c38:	4b93      	ldr	r3, [pc, #588]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d816      	bhi.n	8004c74 <UART_SetConfig+0xb8>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x90>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c69 	.word	0x08004c69
 8004c54:	08004c63 	.word	0x08004c63
 8004c58:	08004c6f 	.word	0x08004c6f
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e150      	b.n	8004f04 <UART_SetConfig+0x348>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e14d      	b.n	8004f04 <UART_SetConfig+0x348>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e14a      	b.n	8004f04 <UART_SetConfig+0x348>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e147      	b.n	8004f04 <UART_SetConfig+0x348>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e144      	b.n	8004f04 <UART_SetConfig+0x348>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a83      	ldr	r2, [pc, #524]	; (8004e8c <UART_SetConfig+0x2d0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d132      	bne.n	8004cea <UART_SetConfig+0x12e>
 8004c84:	4b80      	ldr	r3, [pc, #512]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d828      	bhi.n	8004ce4 <UART_SetConfig+0x128>
 8004c92:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0xdc>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ccd 	.word	0x08004ccd
 8004c9c:	08004ce5 	.word	0x08004ce5
 8004ca0:	08004ce5 	.word	0x08004ce5
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004cd9 	.word	0x08004cd9
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004ce5 	.word	0x08004ce5
 8004cb4:	08004ce5 	.word	0x08004ce5
 8004cb8:	08004cd3 	.word	0x08004cd3
 8004cbc:	08004ce5 	.word	0x08004ce5
 8004cc0:	08004ce5 	.word	0x08004ce5
 8004cc4:	08004ce5 	.word	0x08004ce5
 8004cc8:	08004cdf 	.word	0x08004cdf
 8004ccc:	2300      	movs	r3, #0
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e118      	b.n	8004f04 <UART_SetConfig+0x348>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e115      	b.n	8004f04 <UART_SetConfig+0x348>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e112      	b.n	8004f04 <UART_SetConfig+0x348>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e10f      	b.n	8004f04 <UART_SetConfig+0x348>
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e10c      	b.n	8004f04 <UART_SetConfig+0x348>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a68      	ldr	r2, [pc, #416]	; (8004e90 <UART_SetConfig+0x2d4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d120      	bne.n	8004d36 <UART_SetConfig+0x17a>
 8004cf4:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cfe:	2b30      	cmp	r3, #48	; 0x30
 8004d00:	d013      	beq.n	8004d2a <UART_SetConfig+0x16e>
 8004d02:	2b30      	cmp	r3, #48	; 0x30
 8004d04:	d814      	bhi.n	8004d30 <UART_SetConfig+0x174>
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d009      	beq.n	8004d1e <UART_SetConfig+0x162>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d810      	bhi.n	8004d30 <UART_SetConfig+0x174>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <UART_SetConfig+0x15c>
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d006      	beq.n	8004d24 <UART_SetConfig+0x168>
 8004d16:	e00b      	b.n	8004d30 <UART_SetConfig+0x174>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e0f2      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e0ef      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d24:	2304      	movs	r3, #4
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e0ec      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e0e9      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d30:	2310      	movs	r3, #16
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e0e6      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a56      	ldr	r2, [pc, #344]	; (8004e94 <UART_SetConfig+0x2d8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d120      	bne.n	8004d82 <UART_SetConfig+0x1c6>
 8004d40:	4b51      	ldr	r3, [pc, #324]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d4c:	d013      	beq.n	8004d76 <UART_SetConfig+0x1ba>
 8004d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d50:	d814      	bhi.n	8004d7c <UART_SetConfig+0x1c0>
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d009      	beq.n	8004d6a <UART_SetConfig+0x1ae>
 8004d56:	2b80      	cmp	r3, #128	; 0x80
 8004d58:	d810      	bhi.n	8004d7c <UART_SetConfig+0x1c0>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <UART_SetConfig+0x1a8>
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d006      	beq.n	8004d70 <UART_SetConfig+0x1b4>
 8004d62:	e00b      	b.n	8004d7c <UART_SetConfig+0x1c0>
 8004d64:	2300      	movs	r3, #0
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e0cc      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e0c9      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d70:	2304      	movs	r3, #4
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e0c6      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d76:	2308      	movs	r3, #8
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e0c3      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e0c0      	b.n	8004f04 <UART_SetConfig+0x348>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a44      	ldr	r2, [pc, #272]	; (8004e98 <UART_SetConfig+0x2dc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d125      	bne.n	8004dd8 <UART_SetConfig+0x21c>
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d9a:	d017      	beq.n	8004dcc <UART_SetConfig+0x210>
 8004d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004da0:	d817      	bhi.n	8004dd2 <UART_SetConfig+0x216>
 8004da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da6:	d00b      	beq.n	8004dc0 <UART_SetConfig+0x204>
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dac:	d811      	bhi.n	8004dd2 <UART_SetConfig+0x216>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <UART_SetConfig+0x1fe>
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	d006      	beq.n	8004dc6 <UART_SetConfig+0x20a>
 8004db8:	e00b      	b.n	8004dd2 <UART_SetConfig+0x216>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	77fb      	strb	r3, [r7, #31]
 8004dbe:	e0a1      	b.n	8004f04 <UART_SetConfig+0x348>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e09e      	b.n	8004f04 <UART_SetConfig+0x348>
 8004dc6:	2304      	movs	r3, #4
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e09b      	b.n	8004f04 <UART_SetConfig+0x348>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e098      	b.n	8004f04 <UART_SetConfig+0x348>
 8004dd2:	2310      	movs	r3, #16
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e095      	b.n	8004f04 <UART_SetConfig+0x348>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <UART_SetConfig+0x2e0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d125      	bne.n	8004e2e <UART_SetConfig+0x272>
 8004de2:	4b29      	ldr	r3, [pc, #164]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df0:	d017      	beq.n	8004e22 <UART_SetConfig+0x266>
 8004df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df6:	d817      	bhi.n	8004e28 <UART_SetConfig+0x26c>
 8004df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfc:	d00b      	beq.n	8004e16 <UART_SetConfig+0x25a>
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e02:	d811      	bhi.n	8004e28 <UART_SetConfig+0x26c>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <UART_SetConfig+0x254>
 8004e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0c:	d006      	beq.n	8004e1c <UART_SetConfig+0x260>
 8004e0e:	e00b      	b.n	8004e28 <UART_SetConfig+0x26c>
 8004e10:	2301      	movs	r3, #1
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e076      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e16:	2302      	movs	r3, #2
 8004e18:	77fb      	strb	r3, [r7, #31]
 8004e1a:	e073      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	77fb      	strb	r3, [r7, #31]
 8004e20:	e070      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e22:	2308      	movs	r3, #8
 8004e24:	77fb      	strb	r3, [r7, #31]
 8004e26:	e06d      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e28:	2310      	movs	r3, #16
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e06a      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1b      	ldr	r2, [pc, #108]	; (8004ea0 <UART_SetConfig+0x2e4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d138      	bne.n	8004eaa <UART_SetConfig+0x2ee>
 8004e38:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <UART_SetConfig+0x2cc>)
 8004e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e46:	d017      	beq.n	8004e78 <UART_SetConfig+0x2bc>
 8004e48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e4c:	d82a      	bhi.n	8004ea4 <UART_SetConfig+0x2e8>
 8004e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e52:	d00b      	beq.n	8004e6c <UART_SetConfig+0x2b0>
 8004e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e58:	d824      	bhi.n	8004ea4 <UART_SetConfig+0x2e8>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <UART_SetConfig+0x2aa>
 8004e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e62:	d006      	beq.n	8004e72 <UART_SetConfig+0x2b6>
 8004e64:	e01e      	b.n	8004ea4 <UART_SetConfig+0x2e8>
 8004e66:	2300      	movs	r3, #0
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e04b      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e048      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e72:	2304      	movs	r3, #4
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e045      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e042      	b.n	8004f04 <UART_SetConfig+0x348>
 8004e7e:	bf00      	nop
 8004e80:	efff69f3 	.word	0xefff69f3
 8004e84:	40011000 	.word	0x40011000
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40004400 	.word	0x40004400
 8004e90:	40004800 	.word	0x40004800
 8004e94:	40004c00 	.word	0x40004c00
 8004e98:	40005000 	.word	0x40005000
 8004e9c:	40011400 	.word	0x40011400
 8004ea0:	40007800 	.word	0x40007800
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e02c      	b.n	8004f04 <UART_SetConfig+0x348>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a72      	ldr	r2, [pc, #456]	; (8005078 <UART_SetConfig+0x4bc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d125      	bne.n	8004f00 <UART_SetConfig+0x344>
 8004eb4:	4b71      	ldr	r3, [pc, #452]	; (800507c <UART_SetConfig+0x4c0>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ebe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ec2:	d017      	beq.n	8004ef4 <UART_SetConfig+0x338>
 8004ec4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ec8:	d817      	bhi.n	8004efa <UART_SetConfig+0x33e>
 8004eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ece:	d00b      	beq.n	8004ee8 <UART_SetConfig+0x32c>
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d811      	bhi.n	8004efa <UART_SetConfig+0x33e>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <UART_SetConfig+0x326>
 8004eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ede:	d006      	beq.n	8004eee <UART_SetConfig+0x332>
 8004ee0:	e00b      	b.n	8004efa <UART_SetConfig+0x33e>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e00d      	b.n	8004f04 <UART_SetConfig+0x348>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e00a      	b.n	8004f04 <UART_SetConfig+0x348>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e007      	b.n	8004f04 <UART_SetConfig+0x348>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e004      	b.n	8004f04 <UART_SetConfig+0x348>
 8004efa:	2310      	movs	r3, #16
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e001      	b.n	8004f04 <UART_SetConfig+0x348>
 8004f00:	2310      	movs	r3, #16
 8004f02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0c:	d15b      	bne.n	8004fc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f0e:	7ffb      	ldrb	r3, [r7, #31]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d828      	bhi.n	8004f66 <UART_SetConfig+0x3aa>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x360>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	08004f67 	.word	0x08004f67
 8004f2c:	08004f57 	.word	0x08004f57
 8004f30:	08004f67 	.word	0x08004f67
 8004f34:	08004f67 	.word	0x08004f67
 8004f38:	08004f67 	.word	0x08004f67
 8004f3c:	08004f5f 	.word	0x08004f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7ff f94c 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8004f44:	61b8      	str	r0, [r7, #24]
        break;
 8004f46:	e013      	b.n	8004f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f48:	f7ff f95c 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8004f4c:	61b8      	str	r0, [r7, #24]
        break;
 8004f4e:	e00f      	b.n	8004f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f50:	4b4b      	ldr	r3, [pc, #300]	; (8005080 <UART_SetConfig+0x4c4>)
 8004f52:	61bb      	str	r3, [r7, #24]
        break;
 8004f54:	e00c      	b.n	8004f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f56:	f7ff f82f 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8004f5a:	61b8      	str	r0, [r7, #24]
        break;
 8004f5c:	e008      	b.n	8004f70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f62:	61bb      	str	r3, [r7, #24]
        break;
 8004f64:	e004      	b.n	8004f70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	77bb      	strb	r3, [r7, #30]
        break;
 8004f6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d074      	beq.n	8005060 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	005a      	lsls	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	085b      	lsrs	r3, r3, #1
 8004f80:	441a      	add	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d916      	bls.n	8004fc0 <UART_SetConfig+0x404>
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d212      	bcs.n	8004fc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f023 030f 	bic.w	r3, r3, #15
 8004fa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	89fa      	ldrh	r2, [r7, #14]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	e04f      	b.n	8005060 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	77bb      	strb	r3, [r7, #30]
 8004fc4:	e04c      	b.n	8005060 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fc6:	7ffb      	ldrb	r3, [r7, #31]
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d828      	bhi.n	800501e <UART_SetConfig+0x462>
 8004fcc:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <UART_SetConfig+0x418>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	0800501f 	.word	0x0800501f
 8004fe4:	0800500f 	.word	0x0800500f
 8004fe8:	0800501f 	.word	0x0800501f
 8004fec:	0800501f 	.word	0x0800501f
 8004ff0:	0800501f 	.word	0x0800501f
 8004ff4:	08005017 	.word	0x08005017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7ff f8f0 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8004ffc:	61b8      	str	r0, [r7, #24]
        break;
 8004ffe:	e013      	b.n	8005028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005000:	f7ff f900 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8005004:	61b8      	str	r0, [r7, #24]
        break;
 8005006:	e00f      	b.n	8005028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <UART_SetConfig+0x4c4>)
 800500a:	61bb      	str	r3, [r7, #24]
        break;
 800500c:	e00c      	b.n	8005028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7fe ffd3 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8005012:	61b8      	str	r0, [r7, #24]
        break;
 8005014:	e008      	b.n	8005028 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e004      	b.n	8005028 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	77bb      	strb	r3, [r7, #30]
        break;
 8005026:	bf00      	nop
    }

    if (pclk != 0U)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d018      	beq.n	8005060 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	085a      	lsrs	r2, r3, #1
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	441a      	add	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b0f      	cmp	r3, #15
 8005046:	d909      	bls.n	800505c <UART_SetConfig+0x4a0>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800504e:	d205      	bcs.n	800505c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	b29a      	uxth	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	e001      	b.n	8005060 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800506c:	7fbb      	ldrb	r3, [r7, #30]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40007c00 	.word	0x40007c00
 800507c:	40023800 	.word	0x40023800
 8005080:	00f42400 	.word	0x00f42400

08005084 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00a      	beq.n	80050ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f003 0310 	and.w	r3, r3, #16
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00a      	beq.n	8005136 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01a      	beq.n	800519a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005182:	d10a      	bne.n	800519a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	605a      	str	r2, [r3, #4]
  }
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	; 0x30
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051d8:	f7fb fe56 	bl	8000e88 <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d12e      	bne.n	800524a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	2200      	movs	r2, #0
 80051f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f83b 	bl	8005276 <UART_WaitOnFlagUntilTimeout>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d021      	beq.n	800524a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	60fb      	str	r3, [r7, #12]
   return(result);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	69b9      	ldr	r1, [r7, #24]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	617b      	str	r3, [r7, #20]
   return(result);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e6      	bne.n	8005206 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e011      	b.n	800526e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3728      	adds	r7, #40	; 0x28
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	e04f      	b.n	8005328 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528e:	d04b      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fb fdfa 	bl	8000e88 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04e      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d037      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d034      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b40      	cmp	r3, #64	; 0x40
 80052c2:	d031      	beq.n	8005328 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d110      	bne.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2208      	movs	r2, #8
 80052d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f838 	bl	8005350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2208      	movs	r2, #8
 80052e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e029      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d111      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800530c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 f81e 	bl	8005350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e00f      	b.n	8005348 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4013      	ands	r3, r2
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	429a      	cmp	r2, r3
 8005336:	bf0c      	ite	eq
 8005338:	2301      	moveq	r3, #1
 800533a:	2300      	movne	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	461a      	mov	r2, r3
 8005340:	79fb      	ldrb	r3, [r7, #7]
 8005342:	429a      	cmp	r2, r3
 8005344:	d0a0      	beq.n	8005288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005350:	b480      	push	{r7}
 8005352:	b095      	sub	sp, #84	; 0x54
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800536c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	643b      	str	r3, [r7, #64]	; 0x40
 8005378:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800537c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3308      	adds	r3, #8
 8005390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	61fb      	str	r3, [r7, #28]
   return(result);
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b2:	e841 2300 	strex	r3, r2, [r1]
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1e5      	bne.n	800538a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d118      	bne.n	80053f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	647b      	str	r3, [r7, #68]	; 0x44
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	e841 2300 	strex	r3, r2, [r1]
 80053f0:	613b      	str	r3, [r7, #16]
   return(result);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e6      	bne.n	80053c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800540c:	bf00      	nop
 800540e:	3754      	adds	r7, #84	; 0x54
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <std>:
 8005418:	2300      	movs	r3, #0
 800541a:	b510      	push	{r4, lr}
 800541c:	4604      	mov	r4, r0
 800541e:	e9c0 3300 	strd	r3, r3, [r0]
 8005422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005426:	6083      	str	r3, [r0, #8]
 8005428:	8181      	strh	r1, [r0, #12]
 800542a:	6643      	str	r3, [r0, #100]	; 0x64
 800542c:	81c2      	strh	r2, [r0, #14]
 800542e:	6183      	str	r3, [r0, #24]
 8005430:	4619      	mov	r1, r3
 8005432:	2208      	movs	r2, #8
 8005434:	305c      	adds	r0, #92	; 0x5c
 8005436:	f000 f9f7 	bl	8005828 <memset>
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <std+0x58>)
 800543c:	6263      	str	r3, [r4, #36]	; 0x24
 800543e:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <std+0x5c>)
 8005440:	62a3      	str	r3, [r4, #40]	; 0x28
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <std+0x60>)
 8005444:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <std+0x64>)
 8005448:	6323      	str	r3, [r4, #48]	; 0x30
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <std+0x68>)
 800544c:	6224      	str	r4, [r4, #32]
 800544e:	429c      	cmp	r4, r3
 8005450:	d006      	beq.n	8005460 <std+0x48>
 8005452:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005456:	4294      	cmp	r4, r2
 8005458:	d002      	beq.n	8005460 <std+0x48>
 800545a:	33d0      	adds	r3, #208	; 0xd0
 800545c:	429c      	cmp	r4, r3
 800545e:	d105      	bne.n	800546c <std+0x54>
 8005460:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005468:	f000 ba56 	b.w	8005918 <__retarget_lock_init_recursive>
 800546c:	bd10      	pop	{r4, pc}
 800546e:	bf00      	nop
 8005470:	08005679 	.word	0x08005679
 8005474:	0800569b 	.word	0x0800569b
 8005478:	080056d3 	.word	0x080056d3
 800547c:	080056f7 	.word	0x080056f7
 8005480:	2000017c 	.word	0x2000017c

08005484 <stdio_exit_handler>:
 8005484:	4a02      	ldr	r2, [pc, #8]	; (8005490 <stdio_exit_handler+0xc>)
 8005486:	4903      	ldr	r1, [pc, #12]	; (8005494 <stdio_exit_handler+0x10>)
 8005488:	4803      	ldr	r0, [pc, #12]	; (8005498 <stdio_exit_handler+0x14>)
 800548a:	f000 b869 	b.w	8005560 <_fwalk_sglue>
 800548e:	bf00      	nop
 8005490:	20000014 	.word	0x20000014
 8005494:	080061c5 	.word	0x080061c5
 8005498:	20000020 	.word	0x20000020

0800549c <cleanup_stdio>:
 800549c:	6841      	ldr	r1, [r0, #4]
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <cleanup_stdio+0x34>)
 80054a0:	4299      	cmp	r1, r3
 80054a2:	b510      	push	{r4, lr}
 80054a4:	4604      	mov	r4, r0
 80054a6:	d001      	beq.n	80054ac <cleanup_stdio+0x10>
 80054a8:	f000 fe8c 	bl	80061c4 <_fflush_r>
 80054ac:	68a1      	ldr	r1, [r4, #8]
 80054ae:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <cleanup_stdio+0x38>)
 80054b0:	4299      	cmp	r1, r3
 80054b2:	d002      	beq.n	80054ba <cleanup_stdio+0x1e>
 80054b4:	4620      	mov	r0, r4
 80054b6:	f000 fe85 	bl	80061c4 <_fflush_r>
 80054ba:	68e1      	ldr	r1, [r4, #12]
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <cleanup_stdio+0x3c>)
 80054be:	4299      	cmp	r1, r3
 80054c0:	d004      	beq.n	80054cc <cleanup_stdio+0x30>
 80054c2:	4620      	mov	r0, r4
 80054c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054c8:	f000 be7c 	b.w	80061c4 <_fflush_r>
 80054cc:	bd10      	pop	{r4, pc}
 80054ce:	bf00      	nop
 80054d0:	2000017c 	.word	0x2000017c
 80054d4:	200001e4 	.word	0x200001e4
 80054d8:	2000024c 	.word	0x2000024c

080054dc <global_stdio_init.part.0>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <global_stdio_init.part.0+0x30>)
 80054e0:	4c0b      	ldr	r4, [pc, #44]	; (8005510 <global_stdio_init.part.0+0x34>)
 80054e2:	4a0c      	ldr	r2, [pc, #48]	; (8005514 <global_stdio_init.part.0+0x38>)
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	4620      	mov	r0, r4
 80054e8:	2200      	movs	r2, #0
 80054ea:	2104      	movs	r1, #4
 80054ec:	f7ff ff94 	bl	8005418 <std>
 80054f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054f4:	2201      	movs	r2, #1
 80054f6:	2109      	movs	r1, #9
 80054f8:	f7ff ff8e 	bl	8005418 <std>
 80054fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005500:	2202      	movs	r2, #2
 8005502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005506:	2112      	movs	r1, #18
 8005508:	f7ff bf86 	b.w	8005418 <std>
 800550c:	200002b4 	.word	0x200002b4
 8005510:	2000017c 	.word	0x2000017c
 8005514:	08005485 	.word	0x08005485

08005518 <__sfp_lock_acquire>:
 8005518:	4801      	ldr	r0, [pc, #4]	; (8005520 <__sfp_lock_acquire+0x8>)
 800551a:	f000 b9fe 	b.w	800591a <__retarget_lock_acquire_recursive>
 800551e:	bf00      	nop
 8005520:	200002bd 	.word	0x200002bd

08005524 <__sfp_lock_release>:
 8005524:	4801      	ldr	r0, [pc, #4]	; (800552c <__sfp_lock_release+0x8>)
 8005526:	f000 b9f9 	b.w	800591c <__retarget_lock_release_recursive>
 800552a:	bf00      	nop
 800552c:	200002bd 	.word	0x200002bd

08005530 <__sinit>:
 8005530:	b510      	push	{r4, lr}
 8005532:	4604      	mov	r4, r0
 8005534:	f7ff fff0 	bl	8005518 <__sfp_lock_acquire>
 8005538:	6a23      	ldr	r3, [r4, #32]
 800553a:	b11b      	cbz	r3, 8005544 <__sinit+0x14>
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	f7ff bff0 	b.w	8005524 <__sfp_lock_release>
 8005544:	4b04      	ldr	r3, [pc, #16]	; (8005558 <__sinit+0x28>)
 8005546:	6223      	str	r3, [r4, #32]
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <__sinit+0x2c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1f5      	bne.n	800553c <__sinit+0xc>
 8005550:	f7ff ffc4 	bl	80054dc <global_stdio_init.part.0>
 8005554:	e7f2      	b.n	800553c <__sinit+0xc>
 8005556:	bf00      	nop
 8005558:	0800549d 	.word	0x0800549d
 800555c:	200002b4 	.word	0x200002b4

08005560 <_fwalk_sglue>:
 8005560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005564:	4607      	mov	r7, r0
 8005566:	4688      	mov	r8, r1
 8005568:	4614      	mov	r4, r2
 800556a:	2600      	movs	r6, #0
 800556c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005570:	f1b9 0901 	subs.w	r9, r9, #1
 8005574:	d505      	bpl.n	8005582 <_fwalk_sglue+0x22>
 8005576:	6824      	ldr	r4, [r4, #0]
 8005578:	2c00      	cmp	r4, #0
 800557a:	d1f7      	bne.n	800556c <_fwalk_sglue+0xc>
 800557c:	4630      	mov	r0, r6
 800557e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d907      	bls.n	8005598 <_fwalk_sglue+0x38>
 8005588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800558c:	3301      	adds	r3, #1
 800558e:	d003      	beq.n	8005598 <_fwalk_sglue+0x38>
 8005590:	4629      	mov	r1, r5
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	4306      	orrs	r6, r0
 8005598:	3568      	adds	r5, #104	; 0x68
 800559a:	e7e9      	b.n	8005570 <_fwalk_sglue+0x10>

0800559c <iprintf>:
 800559c:	b40f      	push	{r0, r1, r2, r3}
 800559e:	b507      	push	{r0, r1, r2, lr}
 80055a0:	4906      	ldr	r1, [pc, #24]	; (80055bc <iprintf+0x20>)
 80055a2:	ab04      	add	r3, sp, #16
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80055aa:	6881      	ldr	r1, [r0, #8]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	f000 fad9 	bl	8005b64 <_vfiprintf_r>
 80055b2:	b003      	add	sp, #12
 80055b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b8:	b004      	add	sp, #16
 80055ba:	4770      	bx	lr
 80055bc:	2000006c 	.word	0x2000006c

080055c0 <_puts_r>:
 80055c0:	6a03      	ldr	r3, [r0, #32]
 80055c2:	b570      	push	{r4, r5, r6, lr}
 80055c4:	6884      	ldr	r4, [r0, #8]
 80055c6:	4605      	mov	r5, r0
 80055c8:	460e      	mov	r6, r1
 80055ca:	b90b      	cbnz	r3, 80055d0 <_puts_r+0x10>
 80055cc:	f7ff ffb0 	bl	8005530 <__sinit>
 80055d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d2:	07db      	lsls	r3, r3, #31
 80055d4:	d405      	bmi.n	80055e2 <_puts_r+0x22>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	0598      	lsls	r0, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_puts_r+0x22>
 80055dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055de:	f000 f99c 	bl	800591a <__retarget_lock_acquire_recursive>
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	0719      	lsls	r1, r3, #28
 80055e6:	d513      	bpl.n	8005610 <_puts_r+0x50>
 80055e8:	6923      	ldr	r3, [r4, #16]
 80055ea:	b18b      	cbz	r3, 8005610 <_puts_r+0x50>
 80055ec:	3e01      	subs	r6, #1
 80055ee:	68a3      	ldr	r3, [r4, #8]
 80055f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60a3      	str	r3, [r4, #8]
 80055f8:	b9e9      	cbnz	r1, 8005636 <_puts_r+0x76>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	da2e      	bge.n	800565c <_puts_r+0x9c>
 80055fe:	4622      	mov	r2, r4
 8005600:	210a      	movs	r1, #10
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f87b 	bl	80056fe <__swbuf_r>
 8005608:	3001      	adds	r0, #1
 800560a:	d007      	beq.n	800561c <_puts_r+0x5c>
 800560c:	250a      	movs	r5, #10
 800560e:	e007      	b.n	8005620 <_puts_r+0x60>
 8005610:	4621      	mov	r1, r4
 8005612:	4628      	mov	r0, r5
 8005614:	f000 f8b0 	bl	8005778 <__swsetup_r>
 8005618:	2800      	cmp	r0, #0
 800561a:	d0e7      	beq.n	80055ec <_puts_r+0x2c>
 800561c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005620:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005622:	07da      	lsls	r2, r3, #31
 8005624:	d405      	bmi.n	8005632 <_puts_r+0x72>
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	059b      	lsls	r3, r3, #22
 800562a:	d402      	bmi.n	8005632 <_puts_r+0x72>
 800562c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800562e:	f000 f975 	bl	800591c <__retarget_lock_release_recursive>
 8005632:	4628      	mov	r0, r5
 8005634:	bd70      	pop	{r4, r5, r6, pc}
 8005636:	2b00      	cmp	r3, #0
 8005638:	da04      	bge.n	8005644 <_puts_r+0x84>
 800563a:	69a2      	ldr	r2, [r4, #24]
 800563c:	429a      	cmp	r2, r3
 800563e:	dc06      	bgt.n	800564e <_puts_r+0x8e>
 8005640:	290a      	cmp	r1, #10
 8005642:	d004      	beq.n	800564e <_puts_r+0x8e>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	1c5a      	adds	r2, r3, #1
 8005648:	6022      	str	r2, [r4, #0]
 800564a:	7019      	strb	r1, [r3, #0]
 800564c:	e7cf      	b.n	80055ee <_puts_r+0x2e>
 800564e:	4622      	mov	r2, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f000 f854 	bl	80056fe <__swbuf_r>
 8005656:	3001      	adds	r0, #1
 8005658:	d1c9      	bne.n	80055ee <_puts_r+0x2e>
 800565a:	e7df      	b.n	800561c <_puts_r+0x5c>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	250a      	movs	r5, #10
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	6022      	str	r2, [r4, #0]
 8005664:	701d      	strb	r5, [r3, #0]
 8005666:	e7db      	b.n	8005620 <_puts_r+0x60>

08005668 <puts>:
 8005668:	4b02      	ldr	r3, [pc, #8]	; (8005674 <puts+0xc>)
 800566a:	4601      	mov	r1, r0
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f7ff bfa7 	b.w	80055c0 <_puts_r>
 8005672:	bf00      	nop
 8005674:	2000006c 	.word	0x2000006c

08005678 <__sread>:
 8005678:	b510      	push	{r4, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005680:	f000 f8fc 	bl	800587c <_read_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	bfab      	itete	ge
 8005688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800568a:	89a3      	ldrhlt	r3, [r4, #12]
 800568c:	181b      	addge	r3, r3, r0
 800568e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005692:	bfac      	ite	ge
 8005694:	6563      	strge	r3, [r4, #84]	; 0x54
 8005696:	81a3      	strhlt	r3, [r4, #12]
 8005698:	bd10      	pop	{r4, pc}

0800569a <__swrite>:
 800569a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569e:	461f      	mov	r7, r3
 80056a0:	898b      	ldrh	r3, [r1, #12]
 80056a2:	05db      	lsls	r3, r3, #23
 80056a4:	4605      	mov	r5, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	4616      	mov	r6, r2
 80056aa:	d505      	bpl.n	80056b8 <__swrite+0x1e>
 80056ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b0:	2302      	movs	r3, #2
 80056b2:	2200      	movs	r2, #0
 80056b4:	f000 f8d0 	bl	8005858 <_lseek_r>
 80056b8:	89a3      	ldrh	r3, [r4, #12]
 80056ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	4632      	mov	r2, r6
 80056c6:	463b      	mov	r3, r7
 80056c8:	4628      	mov	r0, r5
 80056ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ce:	f000 b8e7 	b.w	80058a0 <_write_r>

080056d2 <__sseek>:
 80056d2:	b510      	push	{r4, lr}
 80056d4:	460c      	mov	r4, r1
 80056d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056da:	f000 f8bd 	bl	8005858 <_lseek_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	bf15      	itete	ne
 80056e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80056e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056ee:	81a3      	strheq	r3, [r4, #12]
 80056f0:	bf18      	it	ne
 80056f2:	81a3      	strhne	r3, [r4, #12]
 80056f4:	bd10      	pop	{r4, pc}

080056f6 <__sclose>:
 80056f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fa:	f000 b89d 	b.w	8005838 <_close_r>

080056fe <__swbuf_r>:
 80056fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005700:	460e      	mov	r6, r1
 8005702:	4614      	mov	r4, r2
 8005704:	4605      	mov	r5, r0
 8005706:	b118      	cbz	r0, 8005710 <__swbuf_r+0x12>
 8005708:	6a03      	ldr	r3, [r0, #32]
 800570a:	b90b      	cbnz	r3, 8005710 <__swbuf_r+0x12>
 800570c:	f7ff ff10 	bl	8005530 <__sinit>
 8005710:	69a3      	ldr	r3, [r4, #24]
 8005712:	60a3      	str	r3, [r4, #8]
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	071a      	lsls	r2, r3, #28
 8005718:	d525      	bpl.n	8005766 <__swbuf_r+0x68>
 800571a:	6923      	ldr	r3, [r4, #16]
 800571c:	b31b      	cbz	r3, 8005766 <__swbuf_r+0x68>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	6922      	ldr	r2, [r4, #16]
 8005722:	1a98      	subs	r0, r3, r2
 8005724:	6963      	ldr	r3, [r4, #20]
 8005726:	b2f6      	uxtb	r6, r6
 8005728:	4283      	cmp	r3, r0
 800572a:	4637      	mov	r7, r6
 800572c:	dc04      	bgt.n	8005738 <__swbuf_r+0x3a>
 800572e:	4621      	mov	r1, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fd47 	bl	80061c4 <_fflush_r>
 8005736:	b9e0      	cbnz	r0, 8005772 <__swbuf_r+0x74>
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	3b01      	subs	r3, #1
 800573c:	60a3      	str	r3, [r4, #8]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	701e      	strb	r6, [r3, #0]
 8005746:	6962      	ldr	r2, [r4, #20]
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	429a      	cmp	r2, r3
 800574c:	d004      	beq.n	8005758 <__swbuf_r+0x5a>
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	07db      	lsls	r3, r3, #31
 8005752:	d506      	bpl.n	8005762 <__swbuf_r+0x64>
 8005754:	2e0a      	cmp	r6, #10
 8005756:	d104      	bne.n	8005762 <__swbuf_r+0x64>
 8005758:	4621      	mov	r1, r4
 800575a:	4628      	mov	r0, r5
 800575c:	f000 fd32 	bl	80061c4 <_fflush_r>
 8005760:	b938      	cbnz	r0, 8005772 <__swbuf_r+0x74>
 8005762:	4638      	mov	r0, r7
 8005764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 f805 	bl	8005778 <__swsetup_r>
 800576e:	2800      	cmp	r0, #0
 8005770:	d0d5      	beq.n	800571e <__swbuf_r+0x20>
 8005772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005776:	e7f4      	b.n	8005762 <__swbuf_r+0x64>

08005778 <__swsetup_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4b2a      	ldr	r3, [pc, #168]	; (8005824 <__swsetup_r+0xac>)
 800577c:	4605      	mov	r5, r0
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	460c      	mov	r4, r1
 8005782:	b118      	cbz	r0, 800578c <__swsetup_r+0x14>
 8005784:	6a03      	ldr	r3, [r0, #32]
 8005786:	b90b      	cbnz	r3, 800578c <__swsetup_r+0x14>
 8005788:	f7ff fed2 	bl	8005530 <__sinit>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005792:	0718      	lsls	r0, r3, #28
 8005794:	d422      	bmi.n	80057dc <__swsetup_r+0x64>
 8005796:	06d9      	lsls	r1, r3, #27
 8005798:	d407      	bmi.n	80057aa <__swsetup_r+0x32>
 800579a:	2309      	movs	r3, #9
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057a2:	81a3      	strh	r3, [r4, #12]
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a8:	e034      	b.n	8005814 <__swsetup_r+0x9c>
 80057aa:	0758      	lsls	r0, r3, #29
 80057ac:	d512      	bpl.n	80057d4 <__swsetup_r+0x5c>
 80057ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b0:	b141      	cbz	r1, 80057c4 <__swsetup_r+0x4c>
 80057b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b6:	4299      	cmp	r1, r3
 80057b8:	d002      	beq.n	80057c0 <__swsetup_r+0x48>
 80057ba:	4628      	mov	r0, r5
 80057bc:	f000 f8b0 	bl	8005920 <_free_r>
 80057c0:	2300      	movs	r3, #0
 80057c2:	6363      	str	r3, [r4, #52]	; 0x34
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	2300      	movs	r3, #0
 80057ce:	6063      	str	r3, [r4, #4]
 80057d0:	6923      	ldr	r3, [r4, #16]
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	f043 0308 	orr.w	r3, r3, #8
 80057da:	81a3      	strh	r3, [r4, #12]
 80057dc:	6923      	ldr	r3, [r4, #16]
 80057de:	b94b      	cbnz	r3, 80057f4 <__swsetup_r+0x7c>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ea:	d003      	beq.n	80057f4 <__swsetup_r+0x7c>
 80057ec:	4621      	mov	r1, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fd36 	bl	8006260 <__smakebuf_r>
 80057f4:	89a0      	ldrh	r0, [r4, #12]
 80057f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057fa:	f010 0301 	ands.w	r3, r0, #1
 80057fe:	d00a      	beq.n	8005816 <__swsetup_r+0x9e>
 8005800:	2300      	movs	r3, #0
 8005802:	60a3      	str	r3, [r4, #8]
 8005804:	6963      	ldr	r3, [r4, #20]
 8005806:	425b      	negs	r3, r3
 8005808:	61a3      	str	r3, [r4, #24]
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	b943      	cbnz	r3, 8005820 <__swsetup_r+0xa8>
 800580e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005812:	d1c4      	bne.n	800579e <__swsetup_r+0x26>
 8005814:	bd38      	pop	{r3, r4, r5, pc}
 8005816:	0781      	lsls	r1, r0, #30
 8005818:	bf58      	it	pl
 800581a:	6963      	ldrpl	r3, [r4, #20]
 800581c:	60a3      	str	r3, [r4, #8]
 800581e:	e7f4      	b.n	800580a <__swsetup_r+0x92>
 8005820:	2000      	movs	r0, #0
 8005822:	e7f7      	b.n	8005814 <__swsetup_r+0x9c>
 8005824:	2000006c 	.word	0x2000006c

08005828 <memset>:
 8005828:	4402      	add	r2, r0
 800582a:	4603      	mov	r3, r0
 800582c:	4293      	cmp	r3, r2
 800582e:	d100      	bne.n	8005832 <memset+0xa>
 8005830:	4770      	bx	lr
 8005832:	f803 1b01 	strb.w	r1, [r3], #1
 8005836:	e7f9      	b.n	800582c <memset+0x4>

08005838 <_close_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	4d06      	ldr	r5, [pc, #24]	; (8005854 <_close_r+0x1c>)
 800583c:	2300      	movs	r3, #0
 800583e:	4604      	mov	r4, r0
 8005840:	4608      	mov	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fb fa29 	bl	8000c9a <_close>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d102      	bne.n	8005852 <_close_r+0x1a>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	b103      	cbz	r3, 8005852 <_close_r+0x1a>
 8005850:	6023      	str	r3, [r4, #0]
 8005852:	bd38      	pop	{r3, r4, r5, pc}
 8005854:	200002b8 	.word	0x200002b8

08005858 <_lseek_r>:
 8005858:	b538      	push	{r3, r4, r5, lr}
 800585a:	4d07      	ldr	r5, [pc, #28]	; (8005878 <_lseek_r+0x20>)
 800585c:	4604      	mov	r4, r0
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	2200      	movs	r2, #0
 8005864:	602a      	str	r2, [r5, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f7fb fa3e 	bl	8000ce8 <_lseek>
 800586c:	1c43      	adds	r3, r0, #1
 800586e:	d102      	bne.n	8005876 <_lseek_r+0x1e>
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	b103      	cbz	r3, 8005876 <_lseek_r+0x1e>
 8005874:	6023      	str	r3, [r4, #0]
 8005876:	bd38      	pop	{r3, r4, r5, pc}
 8005878:	200002b8 	.word	0x200002b8

0800587c <_read_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	; (800589c <_read_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fb f9cc 	bl	8000c28 <_read>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_read_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_read_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	200002b8 	.word	0x200002b8

080058a0 <_write_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d07      	ldr	r5, [pc, #28]	; (80058c0 <_write_r+0x20>)
 80058a4:	4604      	mov	r4, r0
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	2200      	movs	r2, #0
 80058ac:	602a      	str	r2, [r5, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f7fb f9d7 	bl	8000c62 <_write>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_write_r+0x1e>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_write_r+0x1e>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	200002b8 	.word	0x200002b8

080058c4 <__errno>:
 80058c4:	4b01      	ldr	r3, [pc, #4]	; (80058cc <__errno+0x8>)
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	2000006c 	.word	0x2000006c

080058d0 <__libc_init_array>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4d0d      	ldr	r5, [pc, #52]	; (8005908 <__libc_init_array+0x38>)
 80058d4:	4c0d      	ldr	r4, [pc, #52]	; (800590c <__libc_init_array+0x3c>)
 80058d6:	1b64      	subs	r4, r4, r5
 80058d8:	10a4      	asrs	r4, r4, #2
 80058da:	2600      	movs	r6, #0
 80058dc:	42a6      	cmp	r6, r4
 80058de:	d109      	bne.n	80058f4 <__libc_init_array+0x24>
 80058e0:	4d0b      	ldr	r5, [pc, #44]	; (8005910 <__libc_init_array+0x40>)
 80058e2:	4c0c      	ldr	r4, [pc, #48]	; (8005914 <__libc_init_array+0x44>)
 80058e4:	f000 fd2a 	bl	800633c <_init>
 80058e8:	1b64      	subs	r4, r4, r5
 80058ea:	10a4      	asrs	r4, r4, #2
 80058ec:	2600      	movs	r6, #0
 80058ee:	42a6      	cmp	r6, r4
 80058f0:	d105      	bne.n	80058fe <__libc_init_array+0x2e>
 80058f2:	bd70      	pop	{r4, r5, r6, pc}
 80058f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f8:	4798      	blx	r3
 80058fa:	3601      	adds	r6, #1
 80058fc:	e7ee      	b.n	80058dc <__libc_init_array+0xc>
 80058fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005902:	4798      	blx	r3
 8005904:	3601      	adds	r6, #1
 8005906:	e7f2      	b.n	80058ee <__libc_init_array+0x1e>
 8005908:	080063e0 	.word	0x080063e0
 800590c:	080063e0 	.word	0x080063e0
 8005910:	080063e0 	.word	0x080063e0
 8005914:	080063e4 	.word	0x080063e4

08005918 <__retarget_lock_init_recursive>:
 8005918:	4770      	bx	lr

0800591a <__retarget_lock_acquire_recursive>:
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_release_recursive>:
 800591c:	4770      	bx	lr
	...

08005920 <_free_r>:
 8005920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005922:	2900      	cmp	r1, #0
 8005924:	d044      	beq.n	80059b0 <_free_r+0x90>
 8005926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800592a:	9001      	str	r0, [sp, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f1a1 0404 	sub.w	r4, r1, #4
 8005932:	bfb8      	it	lt
 8005934:	18e4      	addlt	r4, r4, r3
 8005936:	f000 f8df 	bl	8005af8 <__malloc_lock>
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <_free_r+0x94>)
 800593c:	9801      	ldr	r0, [sp, #4]
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	b933      	cbnz	r3, 8005950 <_free_r+0x30>
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	6014      	str	r4, [r2, #0]
 8005946:	b003      	add	sp, #12
 8005948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800594c:	f000 b8da 	b.w	8005b04 <__malloc_unlock>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d908      	bls.n	8005966 <_free_r+0x46>
 8005954:	6825      	ldr	r5, [r4, #0]
 8005956:	1961      	adds	r1, r4, r5
 8005958:	428b      	cmp	r3, r1
 800595a:	bf01      	itttt	eq
 800595c:	6819      	ldreq	r1, [r3, #0]
 800595e:	685b      	ldreq	r3, [r3, #4]
 8005960:	1949      	addeq	r1, r1, r5
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	e7ed      	b.n	8005942 <_free_r+0x22>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x50>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x46>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1855      	adds	r5, r2, r1
 8005974:	42a5      	cmp	r5, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x70>
 8005978:	6824      	ldr	r4, [r4, #0]
 800597a:	4421      	add	r1, r4
 800597c:	1854      	adds	r4, r2, r1
 800597e:	42a3      	cmp	r3, r4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1e0      	bne.n	8005946 <_free_r+0x26>
 8005984:	681c      	ldr	r4, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	440c      	add	r4, r1
 800598c:	6014      	str	r4, [r2, #0]
 800598e:	e7da      	b.n	8005946 <_free_r+0x26>
 8005990:	d902      	bls.n	8005998 <_free_r+0x78>
 8005992:	230c      	movs	r3, #12
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	e7d6      	b.n	8005946 <_free_r+0x26>
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	1961      	adds	r1, r4, r5
 800599c:	428b      	cmp	r3, r1
 800599e:	bf04      	itt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	bf04      	itt	eq
 80059a8:	1949      	addeq	r1, r1, r5
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6054      	str	r4, [r2, #4]
 80059ae:	e7ca      	b.n	8005946 <_free_r+0x26>
 80059b0:	b003      	add	sp, #12
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	200002c0 	.word	0x200002c0

080059b8 <sbrk_aligned>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4e0e      	ldr	r6, [pc, #56]	; (80059f4 <sbrk_aligned+0x3c>)
 80059bc:	460c      	mov	r4, r1
 80059be:	6831      	ldr	r1, [r6, #0]
 80059c0:	4605      	mov	r5, r0
 80059c2:	b911      	cbnz	r1, 80059ca <sbrk_aligned+0x12>
 80059c4:	f000 fcaa 	bl	800631c <_sbrk_r>
 80059c8:	6030      	str	r0, [r6, #0]
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 fca5 	bl	800631c <_sbrk_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d00a      	beq.n	80059ec <sbrk_aligned+0x34>
 80059d6:	1cc4      	adds	r4, r0, #3
 80059d8:	f024 0403 	bic.w	r4, r4, #3
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d007      	beq.n	80059f0 <sbrk_aligned+0x38>
 80059e0:	1a21      	subs	r1, r4, r0
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 fc9a 	bl	800631c <_sbrk_r>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d101      	bne.n	80059f0 <sbrk_aligned+0x38>
 80059ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	200002c4 	.word	0x200002c4

080059f8 <_malloc_r>:
 80059f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059fc:	1ccd      	adds	r5, r1, #3
 80059fe:	f025 0503 	bic.w	r5, r5, #3
 8005a02:	3508      	adds	r5, #8
 8005a04:	2d0c      	cmp	r5, #12
 8005a06:	bf38      	it	cc
 8005a08:	250c      	movcc	r5, #12
 8005a0a:	2d00      	cmp	r5, #0
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	db01      	blt.n	8005a14 <_malloc_r+0x1c>
 8005a10:	42a9      	cmp	r1, r5
 8005a12:	d905      	bls.n	8005a20 <_malloc_r+0x28>
 8005a14:	230c      	movs	r3, #12
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	2600      	movs	r6, #0
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005af4 <_malloc_r+0xfc>
 8005a24:	f000 f868 	bl	8005af8 <__malloc_lock>
 8005a28:	f8d8 3000 	ldr.w	r3, [r8]
 8005a2c:	461c      	mov	r4, r3
 8005a2e:	bb5c      	cbnz	r4, 8005a88 <_malloc_r+0x90>
 8005a30:	4629      	mov	r1, r5
 8005a32:	4638      	mov	r0, r7
 8005a34:	f7ff ffc0 	bl	80059b8 <sbrk_aligned>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	d155      	bne.n	8005aea <_malloc_r+0xf2>
 8005a3e:	f8d8 4000 	ldr.w	r4, [r8]
 8005a42:	4626      	mov	r6, r4
 8005a44:	2e00      	cmp	r6, #0
 8005a46:	d145      	bne.n	8005ad4 <_malloc_r+0xdc>
 8005a48:	2c00      	cmp	r4, #0
 8005a4a:	d048      	beq.n	8005ade <_malloc_r+0xe6>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4638      	mov	r0, r7
 8005a52:	eb04 0903 	add.w	r9, r4, r3
 8005a56:	f000 fc61 	bl	800631c <_sbrk_r>
 8005a5a:	4581      	cmp	r9, r0
 8005a5c:	d13f      	bne.n	8005ade <_malloc_r+0xe6>
 8005a5e:	6821      	ldr	r1, [r4, #0]
 8005a60:	1a6d      	subs	r5, r5, r1
 8005a62:	4629      	mov	r1, r5
 8005a64:	4638      	mov	r0, r7
 8005a66:	f7ff ffa7 	bl	80059b8 <sbrk_aligned>
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d037      	beq.n	8005ade <_malloc_r+0xe6>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	442b      	add	r3, r5
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	f8d8 3000 	ldr.w	r3, [r8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d038      	beq.n	8005aee <_malloc_r+0xf6>
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	42a2      	cmp	r2, r4
 8005a80:	d12b      	bne.n	8005ada <_malloc_r+0xe2>
 8005a82:	2200      	movs	r2, #0
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	e00f      	b.n	8005aa8 <_malloc_r+0xb0>
 8005a88:	6822      	ldr	r2, [r4, #0]
 8005a8a:	1b52      	subs	r2, r2, r5
 8005a8c:	d41f      	bmi.n	8005ace <_malloc_r+0xd6>
 8005a8e:	2a0b      	cmp	r2, #11
 8005a90:	d917      	bls.n	8005ac2 <_malloc_r+0xca>
 8005a92:	1961      	adds	r1, r4, r5
 8005a94:	42a3      	cmp	r3, r4
 8005a96:	6025      	str	r5, [r4, #0]
 8005a98:	bf18      	it	ne
 8005a9a:	6059      	strne	r1, [r3, #4]
 8005a9c:	6863      	ldr	r3, [r4, #4]
 8005a9e:	bf08      	it	eq
 8005aa0:	f8c8 1000 	streq.w	r1, [r8]
 8005aa4:	5162      	str	r2, [r4, r5]
 8005aa6:	604b      	str	r3, [r1, #4]
 8005aa8:	4638      	mov	r0, r7
 8005aaa:	f104 060b 	add.w	r6, r4, #11
 8005aae:	f000 f829 	bl	8005b04 <__malloc_unlock>
 8005ab2:	f026 0607 	bic.w	r6, r6, #7
 8005ab6:	1d23      	adds	r3, r4, #4
 8005ab8:	1af2      	subs	r2, r6, r3
 8005aba:	d0ae      	beq.n	8005a1a <_malloc_r+0x22>
 8005abc:	1b9b      	subs	r3, r3, r6
 8005abe:	50a3      	str	r3, [r4, r2]
 8005ac0:	e7ab      	b.n	8005a1a <_malloc_r+0x22>
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	6862      	ldr	r2, [r4, #4]
 8005ac6:	d1dd      	bne.n	8005a84 <_malloc_r+0x8c>
 8005ac8:	f8c8 2000 	str.w	r2, [r8]
 8005acc:	e7ec      	b.n	8005aa8 <_malloc_r+0xb0>
 8005ace:	4623      	mov	r3, r4
 8005ad0:	6864      	ldr	r4, [r4, #4]
 8005ad2:	e7ac      	b.n	8005a2e <_malloc_r+0x36>
 8005ad4:	4634      	mov	r4, r6
 8005ad6:	6876      	ldr	r6, [r6, #4]
 8005ad8:	e7b4      	b.n	8005a44 <_malloc_r+0x4c>
 8005ada:	4613      	mov	r3, r2
 8005adc:	e7cc      	b.n	8005a78 <_malloc_r+0x80>
 8005ade:	230c      	movs	r3, #12
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	f000 f80e 	bl	8005b04 <__malloc_unlock>
 8005ae8:	e797      	b.n	8005a1a <_malloc_r+0x22>
 8005aea:	6025      	str	r5, [r4, #0]
 8005aec:	e7dc      	b.n	8005aa8 <_malloc_r+0xb0>
 8005aee:	605b      	str	r3, [r3, #4]
 8005af0:	deff      	udf	#255	; 0xff
 8005af2:	bf00      	nop
 8005af4:	200002c0 	.word	0x200002c0

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f7ff bf0e 	b.w	800591a <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	200002bc 	.word	0x200002bc

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f7ff bf09 	b.w	800591c <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	200002bc 	.word	0x200002bc

08005b10 <__sfputc_r>:
 8005b10:	6893      	ldr	r3, [r2, #8]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	b410      	push	{r4}
 8005b18:	6093      	str	r3, [r2, #8]
 8005b1a:	da08      	bge.n	8005b2e <__sfputc_r+0x1e>
 8005b1c:	6994      	ldr	r4, [r2, #24]
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	db01      	blt.n	8005b26 <__sfputc_r+0x16>
 8005b22:	290a      	cmp	r1, #10
 8005b24:	d103      	bne.n	8005b2e <__sfputc_r+0x1e>
 8005b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b2a:	f7ff bde8 	b.w	80056fe <__swbuf_r>
 8005b2e:	6813      	ldr	r3, [r2, #0]
 8005b30:	1c58      	adds	r0, r3, #1
 8005b32:	6010      	str	r0, [r2, #0]
 8005b34:	7019      	strb	r1, [r3, #0]
 8005b36:	4608      	mov	r0, r1
 8005b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <__sfputs_r>:
 8005b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b40:	4606      	mov	r6, r0
 8005b42:	460f      	mov	r7, r1
 8005b44:	4614      	mov	r4, r2
 8005b46:	18d5      	adds	r5, r2, r3
 8005b48:	42ac      	cmp	r4, r5
 8005b4a:	d101      	bne.n	8005b50 <__sfputs_r+0x12>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	e007      	b.n	8005b60 <__sfputs_r+0x22>
 8005b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b54:	463a      	mov	r2, r7
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ffda 	bl	8005b10 <__sfputc_r>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d1f3      	bne.n	8005b48 <__sfputs_r+0xa>
 8005b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b64 <_vfiprintf_r>:
 8005b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b68:	460d      	mov	r5, r1
 8005b6a:	b09d      	sub	sp, #116	; 0x74
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	4698      	mov	r8, r3
 8005b70:	4606      	mov	r6, r0
 8005b72:	b118      	cbz	r0, 8005b7c <_vfiprintf_r+0x18>
 8005b74:	6a03      	ldr	r3, [r0, #32]
 8005b76:	b90b      	cbnz	r3, 8005b7c <_vfiprintf_r+0x18>
 8005b78:	f7ff fcda 	bl	8005530 <__sinit>
 8005b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b7e:	07d9      	lsls	r1, r3, #31
 8005b80:	d405      	bmi.n	8005b8e <_vfiprintf_r+0x2a>
 8005b82:	89ab      	ldrh	r3, [r5, #12]
 8005b84:	059a      	lsls	r2, r3, #22
 8005b86:	d402      	bmi.n	8005b8e <_vfiprintf_r+0x2a>
 8005b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b8a:	f7ff fec6 	bl	800591a <__retarget_lock_acquire_recursive>
 8005b8e:	89ab      	ldrh	r3, [r5, #12]
 8005b90:	071b      	lsls	r3, r3, #28
 8005b92:	d501      	bpl.n	8005b98 <_vfiprintf_r+0x34>
 8005b94:	692b      	ldr	r3, [r5, #16]
 8005b96:	b99b      	cbnz	r3, 8005bc0 <_vfiprintf_r+0x5c>
 8005b98:	4629      	mov	r1, r5
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f7ff fdec 	bl	8005778 <__swsetup_r>
 8005ba0:	b170      	cbz	r0, 8005bc0 <_vfiprintf_r+0x5c>
 8005ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ba4:	07dc      	lsls	r4, r3, #31
 8005ba6:	d504      	bpl.n	8005bb2 <_vfiprintf_r+0x4e>
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bac:	b01d      	add	sp, #116	; 0x74
 8005bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	0598      	lsls	r0, r3, #22
 8005bb6:	d4f7      	bmi.n	8005ba8 <_vfiprintf_r+0x44>
 8005bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bba:	f7ff feaf 	bl	800591c <__retarget_lock_release_recursive>
 8005bbe:	e7f3      	b.n	8005ba8 <_vfiprintf_r+0x44>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bce:	2330      	movs	r3, #48	; 0x30
 8005bd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005d84 <_vfiprintf_r+0x220>
 8005bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bd8:	f04f 0901 	mov.w	r9, #1
 8005bdc:	4623      	mov	r3, r4
 8005bde:	469a      	mov	sl, r3
 8005be0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005be4:	b10a      	cbz	r2, 8005bea <_vfiprintf_r+0x86>
 8005be6:	2a25      	cmp	r2, #37	; 0x25
 8005be8:	d1f9      	bne.n	8005bde <_vfiprintf_r+0x7a>
 8005bea:	ebba 0b04 	subs.w	fp, sl, r4
 8005bee:	d00b      	beq.n	8005c08 <_vfiprintf_r+0xa4>
 8005bf0:	465b      	mov	r3, fp
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f7ff ffa1 	bl	8005b3e <__sfputs_r>
 8005bfc:	3001      	adds	r0, #1
 8005bfe:	f000 80a9 	beq.w	8005d54 <_vfiprintf_r+0x1f0>
 8005c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c04:	445a      	add	r2, fp
 8005c06:	9209      	str	r2, [sp, #36]	; 0x24
 8005c08:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a1 	beq.w	8005d54 <_vfiprintf_r+0x1f0>
 8005c12:	2300      	movs	r3, #0
 8005c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c1c:	f10a 0a01 	add.w	sl, sl, #1
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	9307      	str	r3, [sp, #28]
 8005c24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c28:	931a      	str	r3, [sp, #104]	; 0x68
 8005c2a:	4654      	mov	r4, sl
 8005c2c:	2205      	movs	r2, #5
 8005c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c32:	4854      	ldr	r0, [pc, #336]	; (8005d84 <_vfiprintf_r+0x220>)
 8005c34:	f7fa faec 	bl	8000210 <memchr>
 8005c38:	9a04      	ldr	r2, [sp, #16]
 8005c3a:	b9d8      	cbnz	r0, 8005c74 <_vfiprintf_r+0x110>
 8005c3c:	06d1      	lsls	r1, r2, #27
 8005c3e:	bf44      	itt	mi
 8005c40:	2320      	movmi	r3, #32
 8005c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c46:	0713      	lsls	r3, r2, #28
 8005c48:	bf44      	itt	mi
 8005c4a:	232b      	movmi	r3, #43	; 0x2b
 8005c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c50:	f89a 3000 	ldrb.w	r3, [sl]
 8005c54:	2b2a      	cmp	r3, #42	; 0x2a
 8005c56:	d015      	beq.n	8005c84 <_vfiprintf_r+0x120>
 8005c58:	9a07      	ldr	r2, [sp, #28]
 8005c5a:	4654      	mov	r4, sl
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f04f 0c0a 	mov.w	ip, #10
 8005c62:	4621      	mov	r1, r4
 8005c64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c68:	3b30      	subs	r3, #48	; 0x30
 8005c6a:	2b09      	cmp	r3, #9
 8005c6c:	d94d      	bls.n	8005d0a <_vfiprintf_r+0x1a6>
 8005c6e:	b1b0      	cbz	r0, 8005c9e <_vfiprintf_r+0x13a>
 8005c70:	9207      	str	r2, [sp, #28]
 8005c72:	e014      	b.n	8005c9e <_vfiprintf_r+0x13a>
 8005c74:	eba0 0308 	sub.w	r3, r0, r8
 8005c78:	fa09 f303 	lsl.w	r3, r9, r3
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	9304      	str	r3, [sp, #16]
 8005c80:	46a2      	mov	sl, r4
 8005c82:	e7d2      	b.n	8005c2a <_vfiprintf_r+0xc6>
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	1d19      	adds	r1, r3, #4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	9103      	str	r1, [sp, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bfbb      	ittet	lt
 8005c90:	425b      	neglt	r3, r3
 8005c92:	f042 0202 	orrlt.w	r2, r2, #2
 8005c96:	9307      	strge	r3, [sp, #28]
 8005c98:	9307      	strlt	r3, [sp, #28]
 8005c9a:	bfb8      	it	lt
 8005c9c:	9204      	strlt	r2, [sp, #16]
 8005c9e:	7823      	ldrb	r3, [r4, #0]
 8005ca0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ca2:	d10c      	bne.n	8005cbe <_vfiprintf_r+0x15a>
 8005ca4:	7863      	ldrb	r3, [r4, #1]
 8005ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca8:	d134      	bne.n	8005d14 <_vfiprintf_r+0x1b0>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	9203      	str	r2, [sp, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	bfb8      	it	lt
 8005cb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cba:	3402      	adds	r4, #2
 8005cbc:	9305      	str	r3, [sp, #20]
 8005cbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005d94 <_vfiprintf_r+0x230>
 8005cc2:	7821      	ldrb	r1, [r4, #0]
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	f7fa faa2 	bl	8000210 <memchr>
 8005ccc:	b138      	cbz	r0, 8005cde <_vfiprintf_r+0x17a>
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	eba0 000a 	sub.w	r0, r0, sl
 8005cd4:	2240      	movs	r2, #64	; 0x40
 8005cd6:	4082      	lsls	r2, r0
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	3401      	adds	r4, #1
 8005cdc:	9304      	str	r3, [sp, #16]
 8005cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce2:	4829      	ldr	r0, [pc, #164]	; (8005d88 <_vfiprintf_r+0x224>)
 8005ce4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ce8:	2206      	movs	r2, #6
 8005cea:	f7fa fa91 	bl	8000210 <memchr>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d03f      	beq.n	8005d72 <_vfiprintf_r+0x20e>
 8005cf2:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <_vfiprintf_r+0x228>)
 8005cf4:	bb1b      	cbnz	r3, 8005d3e <_vfiprintf_r+0x1da>
 8005cf6:	9b03      	ldr	r3, [sp, #12]
 8005cf8:	3307      	adds	r3, #7
 8005cfa:	f023 0307 	bic.w	r3, r3, #7
 8005cfe:	3308      	adds	r3, #8
 8005d00:	9303      	str	r3, [sp, #12]
 8005d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d04:	443b      	add	r3, r7
 8005d06:	9309      	str	r3, [sp, #36]	; 0x24
 8005d08:	e768      	b.n	8005bdc <_vfiprintf_r+0x78>
 8005d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d0e:	460c      	mov	r4, r1
 8005d10:	2001      	movs	r0, #1
 8005d12:	e7a6      	b.n	8005c62 <_vfiprintf_r+0xfe>
 8005d14:	2300      	movs	r3, #0
 8005d16:	3401      	adds	r4, #1
 8005d18:	9305      	str	r3, [sp, #20]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	f04f 0c0a 	mov.w	ip, #10
 8005d20:	4620      	mov	r0, r4
 8005d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d26:	3a30      	subs	r2, #48	; 0x30
 8005d28:	2a09      	cmp	r2, #9
 8005d2a:	d903      	bls.n	8005d34 <_vfiprintf_r+0x1d0>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0c6      	beq.n	8005cbe <_vfiprintf_r+0x15a>
 8005d30:	9105      	str	r1, [sp, #20]
 8005d32:	e7c4      	b.n	8005cbe <_vfiprintf_r+0x15a>
 8005d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d38:	4604      	mov	r4, r0
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e7f0      	b.n	8005d20 <_vfiprintf_r+0x1bc>
 8005d3e:	ab03      	add	r3, sp, #12
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	462a      	mov	r2, r5
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <_vfiprintf_r+0x22c>)
 8005d46:	a904      	add	r1, sp, #16
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f3af 8000 	nop.w
 8005d4e:	4607      	mov	r7, r0
 8005d50:	1c78      	adds	r0, r7, #1
 8005d52:	d1d6      	bne.n	8005d02 <_vfiprintf_r+0x19e>
 8005d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d56:	07d9      	lsls	r1, r3, #31
 8005d58:	d405      	bmi.n	8005d66 <_vfiprintf_r+0x202>
 8005d5a:	89ab      	ldrh	r3, [r5, #12]
 8005d5c:	059a      	lsls	r2, r3, #22
 8005d5e:	d402      	bmi.n	8005d66 <_vfiprintf_r+0x202>
 8005d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d62:	f7ff fddb 	bl	800591c <__retarget_lock_release_recursive>
 8005d66:	89ab      	ldrh	r3, [r5, #12]
 8005d68:	065b      	lsls	r3, r3, #25
 8005d6a:	f53f af1d 	bmi.w	8005ba8 <_vfiprintf_r+0x44>
 8005d6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d70:	e71c      	b.n	8005bac <_vfiprintf_r+0x48>
 8005d72:	ab03      	add	r3, sp, #12
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	462a      	mov	r2, r5
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <_vfiprintf_r+0x22c>)
 8005d7a:	a904      	add	r1, sp, #16
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f000 f879 	bl	8005e74 <_printf_i>
 8005d82:	e7e4      	b.n	8005d4e <_vfiprintf_r+0x1ea>
 8005d84:	080063a4 	.word	0x080063a4
 8005d88:	080063ae 	.word	0x080063ae
 8005d8c:	00000000 	.word	0x00000000
 8005d90:	08005b3f 	.word	0x08005b3f
 8005d94:	080063aa 	.word	0x080063aa

08005d98 <_printf_common>:
 8005d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	4699      	mov	r9, r3
 8005da0:	688a      	ldr	r2, [r1, #8]
 8005da2:	690b      	ldr	r3, [r1, #16]
 8005da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	bfb8      	it	lt
 8005dac:	4613      	movlt	r3, r2
 8005dae:	6033      	str	r3, [r6, #0]
 8005db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005db4:	4607      	mov	r7, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	b10a      	cbz	r2, 8005dbe <_printf_common+0x26>
 8005dba:	3301      	adds	r3, #1
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	0699      	lsls	r1, r3, #26
 8005dc2:	bf42      	ittt	mi
 8005dc4:	6833      	ldrmi	r3, [r6, #0]
 8005dc6:	3302      	addmi	r3, #2
 8005dc8:	6033      	strmi	r3, [r6, #0]
 8005dca:	6825      	ldr	r5, [r4, #0]
 8005dcc:	f015 0506 	ands.w	r5, r5, #6
 8005dd0:	d106      	bne.n	8005de0 <_printf_common+0x48>
 8005dd2:	f104 0a19 	add.w	sl, r4, #25
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	6832      	ldr	r2, [r6, #0]
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dc26      	bgt.n	8005e2e <_printf_common+0x96>
 8005de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005de4:	1e13      	subs	r3, r2, #0
 8005de6:	6822      	ldr	r2, [r4, #0]
 8005de8:	bf18      	it	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	0692      	lsls	r2, r2, #26
 8005dee:	d42b      	bmi.n	8005e48 <_printf_common+0xb0>
 8005df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005df4:	4649      	mov	r1, r9
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d01e      	beq.n	8005e3c <_printf_common+0xa4>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	6922      	ldr	r2, [r4, #16]
 8005e02:	f003 0306 	and.w	r3, r3, #6
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	bf02      	ittt	eq
 8005e0a:	68e5      	ldreq	r5, [r4, #12]
 8005e0c:	6833      	ldreq	r3, [r6, #0]
 8005e0e:	1aed      	subeq	r5, r5, r3
 8005e10:	68a3      	ldr	r3, [r4, #8]
 8005e12:	bf0c      	ite	eq
 8005e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e18:	2500      	movne	r5, #0
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	bfc4      	itt	gt
 8005e1e:	1a9b      	subgt	r3, r3, r2
 8005e20:	18ed      	addgt	r5, r5, r3
 8005e22:	2600      	movs	r6, #0
 8005e24:	341a      	adds	r4, #26
 8005e26:	42b5      	cmp	r5, r6
 8005e28:	d11a      	bne.n	8005e60 <_printf_common+0xc8>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e008      	b.n	8005e40 <_printf_common+0xa8>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4652      	mov	r2, sl
 8005e32:	4649      	mov	r1, r9
 8005e34:	4638      	mov	r0, r7
 8005e36:	47c0      	blx	r8
 8005e38:	3001      	adds	r0, #1
 8005e3a:	d103      	bne.n	8005e44 <_printf_common+0xac>
 8005e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e44:	3501      	adds	r5, #1
 8005e46:	e7c6      	b.n	8005dd6 <_printf_common+0x3e>
 8005e48:	18e1      	adds	r1, r4, r3
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	2030      	movs	r0, #48	; 0x30
 8005e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e52:	4422      	add	r2, r4
 8005e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	e7c7      	b.n	8005df0 <_printf_common+0x58>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4622      	mov	r2, r4
 8005e64:	4649      	mov	r1, r9
 8005e66:	4638      	mov	r0, r7
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d0e6      	beq.n	8005e3c <_printf_common+0xa4>
 8005e6e:	3601      	adds	r6, #1
 8005e70:	e7d9      	b.n	8005e26 <_printf_common+0x8e>
	...

08005e74 <_printf_i>:
 8005e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e78:	7e0f      	ldrb	r7, [r1, #24]
 8005e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e7c:	2f78      	cmp	r7, #120	; 0x78
 8005e7e:	4691      	mov	r9, r2
 8005e80:	4680      	mov	r8, r0
 8005e82:	460c      	mov	r4, r1
 8005e84:	469a      	mov	sl, r3
 8005e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e8a:	d807      	bhi.n	8005e9c <_printf_i+0x28>
 8005e8c:	2f62      	cmp	r7, #98	; 0x62
 8005e8e:	d80a      	bhi.n	8005ea6 <_printf_i+0x32>
 8005e90:	2f00      	cmp	r7, #0
 8005e92:	f000 80d4 	beq.w	800603e <_printf_i+0x1ca>
 8005e96:	2f58      	cmp	r7, #88	; 0x58
 8005e98:	f000 80c0 	beq.w	800601c <_printf_i+0x1a8>
 8005e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ea4:	e03a      	b.n	8005f1c <_printf_i+0xa8>
 8005ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eaa:	2b15      	cmp	r3, #21
 8005eac:	d8f6      	bhi.n	8005e9c <_printf_i+0x28>
 8005eae:	a101      	add	r1, pc, #4	; (adr r1, 8005eb4 <_printf_i+0x40>)
 8005eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005eb4:	08005f0d 	.word	0x08005f0d
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005e9d 	.word	0x08005e9d
 8005ec0:	08005e9d 	.word	0x08005e9d
 8005ec4:	08005e9d 	.word	0x08005e9d
 8005ec8:	08005e9d 	.word	0x08005e9d
 8005ecc:	08005f21 	.word	0x08005f21
 8005ed0:	08005e9d 	.word	0x08005e9d
 8005ed4:	08005e9d 	.word	0x08005e9d
 8005ed8:	08005e9d 	.word	0x08005e9d
 8005edc:	08005e9d 	.word	0x08005e9d
 8005ee0:	08006025 	.word	0x08006025
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005fdf 	.word	0x08005fdf
 8005eec:	08005e9d 	.word	0x08005e9d
 8005ef0:	08005e9d 	.word	0x08005e9d
 8005ef4:	08006047 	.word	0x08006047
 8005ef8:	08005e9d 	.word	0x08005e9d
 8005efc:	08005f4d 	.word	0x08005f4d
 8005f00:	08005e9d 	.word	0x08005e9d
 8005f04:	08005e9d 	.word	0x08005e9d
 8005f08:	08005fe7 	.word	0x08005fe7
 8005f0c:	682b      	ldr	r3, [r5, #0]
 8005f0e:	1d1a      	adds	r2, r3, #4
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	602a      	str	r2, [r5, #0]
 8005f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e09f      	b.n	8006060 <_printf_i+0x1ec>
 8005f20:	6820      	ldr	r0, [r4, #0]
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	0607      	lsls	r7, r0, #24
 8005f26:	f103 0104 	add.w	r1, r3, #4
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	d501      	bpl.n	8005f32 <_printf_i+0xbe>
 8005f2e:	681e      	ldr	r6, [r3, #0]
 8005f30:	e003      	b.n	8005f3a <_printf_i+0xc6>
 8005f32:	0646      	lsls	r6, r0, #25
 8005f34:	d5fb      	bpl.n	8005f2e <_printf_i+0xba>
 8005f36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	da03      	bge.n	8005f46 <_printf_i+0xd2>
 8005f3e:	232d      	movs	r3, #45	; 0x2d
 8005f40:	4276      	negs	r6, r6
 8005f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f46:	485a      	ldr	r0, [pc, #360]	; (80060b0 <_printf_i+0x23c>)
 8005f48:	230a      	movs	r3, #10
 8005f4a:	e012      	b.n	8005f72 <_printf_i+0xfe>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	1d19      	adds	r1, r3, #4
 8005f52:	6029      	str	r1, [r5, #0]
 8005f54:	0605      	lsls	r5, r0, #24
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0xe8>
 8005f58:	681e      	ldr	r6, [r3, #0]
 8005f5a:	e002      	b.n	8005f62 <_printf_i+0xee>
 8005f5c:	0641      	lsls	r1, r0, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0xe4>
 8005f60:	881e      	ldrh	r6, [r3, #0]
 8005f62:	4853      	ldr	r0, [pc, #332]	; (80060b0 <_printf_i+0x23c>)
 8005f64:	2f6f      	cmp	r7, #111	; 0x6f
 8005f66:	bf0c      	ite	eq
 8005f68:	2308      	moveq	r3, #8
 8005f6a:	230a      	movne	r3, #10
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f72:	6865      	ldr	r5, [r4, #4]
 8005f74:	60a5      	str	r5, [r4, #8]
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	bfa2      	ittt	ge
 8005f7a:	6821      	ldrge	r1, [r4, #0]
 8005f7c:	f021 0104 	bicge.w	r1, r1, #4
 8005f80:	6021      	strge	r1, [r4, #0]
 8005f82:	b90e      	cbnz	r6, 8005f88 <_printf_i+0x114>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	d04b      	beq.n	8006020 <_printf_i+0x1ac>
 8005f88:	4615      	mov	r5, r2
 8005f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005f92:	5dc7      	ldrb	r7, [r0, r7]
 8005f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f98:	4637      	mov	r7, r6
 8005f9a:	42bb      	cmp	r3, r7
 8005f9c:	460e      	mov	r6, r1
 8005f9e:	d9f4      	bls.n	8005f8a <_printf_i+0x116>
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d10b      	bne.n	8005fbc <_printf_i+0x148>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	07de      	lsls	r6, r3, #31
 8005fa8:	d508      	bpl.n	8005fbc <_printf_i+0x148>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	bfde      	ittt	le
 8005fb2:	2330      	movle	r3, #48	; 0x30
 8005fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005fbc:	1b52      	subs	r2, r2, r5
 8005fbe:	6122      	str	r2, [r4, #16]
 8005fc0:	f8cd a000 	str.w	sl, [sp]
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	aa03      	add	r2, sp, #12
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7ff fee4 	bl	8005d98 <_printf_common>
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d14a      	bne.n	800606a <_printf_i+0x1f6>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fd8:	b004      	add	sp, #16
 8005fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	f043 0320 	orr.w	r3, r3, #32
 8005fe4:	6023      	str	r3, [r4, #0]
 8005fe6:	4833      	ldr	r0, [pc, #204]	; (80060b4 <_printf_i+0x240>)
 8005fe8:	2778      	movs	r7, #120	; 0x78
 8005fea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	6829      	ldr	r1, [r5, #0]
 8005ff2:	061f      	lsls	r7, r3, #24
 8005ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ff8:	d402      	bmi.n	8006000 <_printf_i+0x18c>
 8005ffa:	065f      	lsls	r7, r3, #25
 8005ffc:	bf48      	it	mi
 8005ffe:	b2b6      	uxthmi	r6, r6
 8006000:	07df      	lsls	r7, r3, #31
 8006002:	bf48      	it	mi
 8006004:	f043 0320 	orrmi.w	r3, r3, #32
 8006008:	6029      	str	r1, [r5, #0]
 800600a:	bf48      	it	mi
 800600c:	6023      	strmi	r3, [r4, #0]
 800600e:	b91e      	cbnz	r6, 8006018 <_printf_i+0x1a4>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	f023 0320 	bic.w	r3, r3, #32
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	2310      	movs	r3, #16
 800601a:	e7a7      	b.n	8005f6c <_printf_i+0xf8>
 800601c:	4824      	ldr	r0, [pc, #144]	; (80060b0 <_printf_i+0x23c>)
 800601e:	e7e4      	b.n	8005fea <_printf_i+0x176>
 8006020:	4615      	mov	r5, r2
 8006022:	e7bd      	b.n	8005fa0 <_printf_i+0x12c>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	6826      	ldr	r6, [r4, #0]
 8006028:	6961      	ldr	r1, [r4, #20]
 800602a:	1d18      	adds	r0, r3, #4
 800602c:	6028      	str	r0, [r5, #0]
 800602e:	0635      	lsls	r5, r6, #24
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	d501      	bpl.n	8006038 <_printf_i+0x1c4>
 8006034:	6019      	str	r1, [r3, #0]
 8006036:	e002      	b.n	800603e <_printf_i+0x1ca>
 8006038:	0670      	lsls	r0, r6, #25
 800603a:	d5fb      	bpl.n	8006034 <_printf_i+0x1c0>
 800603c:	8019      	strh	r1, [r3, #0]
 800603e:	2300      	movs	r3, #0
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	4615      	mov	r5, r2
 8006044:	e7bc      	b.n	8005fc0 <_printf_i+0x14c>
 8006046:	682b      	ldr	r3, [r5, #0]
 8006048:	1d1a      	adds	r2, r3, #4
 800604a:	602a      	str	r2, [r5, #0]
 800604c:	681d      	ldr	r5, [r3, #0]
 800604e:	6862      	ldr	r2, [r4, #4]
 8006050:	2100      	movs	r1, #0
 8006052:	4628      	mov	r0, r5
 8006054:	f7fa f8dc 	bl	8000210 <memchr>
 8006058:	b108      	cbz	r0, 800605e <_printf_i+0x1ea>
 800605a:	1b40      	subs	r0, r0, r5
 800605c:	6060      	str	r0, [r4, #4]
 800605e:	6863      	ldr	r3, [r4, #4]
 8006060:	6123      	str	r3, [r4, #16]
 8006062:	2300      	movs	r3, #0
 8006064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006068:	e7aa      	b.n	8005fc0 <_printf_i+0x14c>
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	462a      	mov	r2, r5
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	47d0      	blx	sl
 8006074:	3001      	adds	r0, #1
 8006076:	d0ad      	beq.n	8005fd4 <_printf_i+0x160>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	079b      	lsls	r3, r3, #30
 800607c:	d413      	bmi.n	80060a6 <_printf_i+0x232>
 800607e:	68e0      	ldr	r0, [r4, #12]
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	4298      	cmp	r0, r3
 8006084:	bfb8      	it	lt
 8006086:	4618      	movlt	r0, r3
 8006088:	e7a6      	b.n	8005fd8 <_printf_i+0x164>
 800608a:	2301      	movs	r3, #1
 800608c:	4632      	mov	r2, r6
 800608e:	4649      	mov	r1, r9
 8006090:	4640      	mov	r0, r8
 8006092:	47d0      	blx	sl
 8006094:	3001      	adds	r0, #1
 8006096:	d09d      	beq.n	8005fd4 <_printf_i+0x160>
 8006098:	3501      	adds	r5, #1
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	9903      	ldr	r1, [sp, #12]
 800609e:	1a5b      	subs	r3, r3, r1
 80060a0:	42ab      	cmp	r3, r5
 80060a2:	dcf2      	bgt.n	800608a <_printf_i+0x216>
 80060a4:	e7eb      	b.n	800607e <_printf_i+0x20a>
 80060a6:	2500      	movs	r5, #0
 80060a8:	f104 0619 	add.w	r6, r4, #25
 80060ac:	e7f5      	b.n	800609a <_printf_i+0x226>
 80060ae:	bf00      	nop
 80060b0:	080063b5 	.word	0x080063b5
 80060b4:	080063c6 	.word	0x080063c6

080060b8 <__sflush_r>:
 80060b8:	898a      	ldrh	r2, [r1, #12]
 80060ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060be:	4605      	mov	r5, r0
 80060c0:	0710      	lsls	r0, r2, #28
 80060c2:	460c      	mov	r4, r1
 80060c4:	d458      	bmi.n	8006178 <__sflush_r+0xc0>
 80060c6:	684b      	ldr	r3, [r1, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	dc05      	bgt.n	80060d8 <__sflush_r+0x20>
 80060cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	dc02      	bgt.n	80060d8 <__sflush_r+0x20>
 80060d2:	2000      	movs	r0, #0
 80060d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060da:	2e00      	cmp	r6, #0
 80060dc:	d0f9      	beq.n	80060d2 <__sflush_r+0x1a>
 80060de:	2300      	movs	r3, #0
 80060e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060e4:	682f      	ldr	r7, [r5, #0]
 80060e6:	6a21      	ldr	r1, [r4, #32]
 80060e8:	602b      	str	r3, [r5, #0]
 80060ea:	d032      	beq.n	8006152 <__sflush_r+0x9a>
 80060ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	075a      	lsls	r2, r3, #29
 80060f2:	d505      	bpl.n	8006100 <__sflush_r+0x48>
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	1ac0      	subs	r0, r0, r3
 80060f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060fa:	b10b      	cbz	r3, 8006100 <__sflush_r+0x48>
 80060fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060fe:	1ac0      	subs	r0, r0, r3
 8006100:	2300      	movs	r3, #0
 8006102:	4602      	mov	r2, r0
 8006104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006106:	6a21      	ldr	r1, [r4, #32]
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	d106      	bne.n	8006120 <__sflush_r+0x68>
 8006112:	6829      	ldr	r1, [r5, #0]
 8006114:	291d      	cmp	r1, #29
 8006116:	d82b      	bhi.n	8006170 <__sflush_r+0xb8>
 8006118:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <__sflush_r+0x108>)
 800611a:	410a      	asrs	r2, r1
 800611c:	07d6      	lsls	r6, r2, #31
 800611e:	d427      	bmi.n	8006170 <__sflush_r+0xb8>
 8006120:	2200      	movs	r2, #0
 8006122:	6062      	str	r2, [r4, #4]
 8006124:	04d9      	lsls	r1, r3, #19
 8006126:	6922      	ldr	r2, [r4, #16]
 8006128:	6022      	str	r2, [r4, #0]
 800612a:	d504      	bpl.n	8006136 <__sflush_r+0x7e>
 800612c:	1c42      	adds	r2, r0, #1
 800612e:	d101      	bne.n	8006134 <__sflush_r+0x7c>
 8006130:	682b      	ldr	r3, [r5, #0]
 8006132:	b903      	cbnz	r3, 8006136 <__sflush_r+0x7e>
 8006134:	6560      	str	r0, [r4, #84]	; 0x54
 8006136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006138:	602f      	str	r7, [r5, #0]
 800613a:	2900      	cmp	r1, #0
 800613c:	d0c9      	beq.n	80060d2 <__sflush_r+0x1a>
 800613e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006142:	4299      	cmp	r1, r3
 8006144:	d002      	beq.n	800614c <__sflush_r+0x94>
 8006146:	4628      	mov	r0, r5
 8006148:	f7ff fbea 	bl	8005920 <_free_r>
 800614c:	2000      	movs	r0, #0
 800614e:	6360      	str	r0, [r4, #52]	; 0x34
 8006150:	e7c0      	b.n	80060d4 <__sflush_r+0x1c>
 8006152:	2301      	movs	r3, #1
 8006154:	4628      	mov	r0, r5
 8006156:	47b0      	blx	r6
 8006158:	1c41      	adds	r1, r0, #1
 800615a:	d1c8      	bne.n	80060ee <__sflush_r+0x36>
 800615c:	682b      	ldr	r3, [r5, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0c5      	beq.n	80060ee <__sflush_r+0x36>
 8006162:	2b1d      	cmp	r3, #29
 8006164:	d001      	beq.n	800616a <__sflush_r+0xb2>
 8006166:	2b16      	cmp	r3, #22
 8006168:	d101      	bne.n	800616e <__sflush_r+0xb6>
 800616a:	602f      	str	r7, [r5, #0]
 800616c:	e7b1      	b.n	80060d2 <__sflush_r+0x1a>
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	e7ad      	b.n	80060d4 <__sflush_r+0x1c>
 8006178:	690f      	ldr	r7, [r1, #16]
 800617a:	2f00      	cmp	r7, #0
 800617c:	d0a9      	beq.n	80060d2 <__sflush_r+0x1a>
 800617e:	0793      	lsls	r3, r2, #30
 8006180:	680e      	ldr	r6, [r1, #0]
 8006182:	bf08      	it	eq
 8006184:	694b      	ldreq	r3, [r1, #20]
 8006186:	600f      	str	r7, [r1, #0]
 8006188:	bf18      	it	ne
 800618a:	2300      	movne	r3, #0
 800618c:	eba6 0807 	sub.w	r8, r6, r7
 8006190:	608b      	str	r3, [r1, #8]
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	dd9c      	ble.n	80060d2 <__sflush_r+0x1a>
 8006198:	6a21      	ldr	r1, [r4, #32]
 800619a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800619c:	4643      	mov	r3, r8
 800619e:	463a      	mov	r2, r7
 80061a0:	4628      	mov	r0, r5
 80061a2:	47b0      	blx	r6
 80061a4:	2800      	cmp	r0, #0
 80061a6:	dc06      	bgt.n	80061b6 <__sflush_r+0xfe>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061b4:	e78e      	b.n	80060d4 <__sflush_r+0x1c>
 80061b6:	4407      	add	r7, r0
 80061b8:	eba8 0800 	sub.w	r8, r8, r0
 80061bc:	e7e9      	b.n	8006192 <__sflush_r+0xda>
 80061be:	bf00      	nop
 80061c0:	dfbffffe 	.word	0xdfbffffe

080061c4 <_fflush_r>:
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	690b      	ldr	r3, [r1, #16]
 80061c8:	4605      	mov	r5, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	b913      	cbnz	r3, 80061d4 <_fflush_r+0x10>
 80061ce:	2500      	movs	r5, #0
 80061d0:	4628      	mov	r0, r5
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	b118      	cbz	r0, 80061de <_fflush_r+0x1a>
 80061d6:	6a03      	ldr	r3, [r0, #32]
 80061d8:	b90b      	cbnz	r3, 80061de <_fflush_r+0x1a>
 80061da:	f7ff f9a9 	bl	8005530 <__sinit>
 80061de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0f3      	beq.n	80061ce <_fflush_r+0xa>
 80061e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061e8:	07d0      	lsls	r0, r2, #31
 80061ea:	d404      	bmi.n	80061f6 <_fflush_r+0x32>
 80061ec:	0599      	lsls	r1, r3, #22
 80061ee:	d402      	bmi.n	80061f6 <_fflush_r+0x32>
 80061f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f2:	f7ff fb92 	bl	800591a <__retarget_lock_acquire_recursive>
 80061f6:	4628      	mov	r0, r5
 80061f8:	4621      	mov	r1, r4
 80061fa:	f7ff ff5d 	bl	80060b8 <__sflush_r>
 80061fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006200:	07da      	lsls	r2, r3, #31
 8006202:	4605      	mov	r5, r0
 8006204:	d4e4      	bmi.n	80061d0 <_fflush_r+0xc>
 8006206:	89a3      	ldrh	r3, [r4, #12]
 8006208:	059b      	lsls	r3, r3, #22
 800620a:	d4e1      	bmi.n	80061d0 <_fflush_r+0xc>
 800620c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800620e:	f7ff fb85 	bl	800591c <__retarget_lock_release_recursive>
 8006212:	e7dd      	b.n	80061d0 <_fflush_r+0xc>

08006214 <__swhatbuf_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	460c      	mov	r4, r1
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	2900      	cmp	r1, #0
 800621e:	b096      	sub	sp, #88	; 0x58
 8006220:	4615      	mov	r5, r2
 8006222:	461e      	mov	r6, r3
 8006224:	da0d      	bge.n	8006242 <__swhatbuf_r+0x2e>
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	f013 0f80 	tst.w	r3, #128	; 0x80
 800622c:	f04f 0100 	mov.w	r1, #0
 8006230:	bf0c      	ite	eq
 8006232:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006236:	2340      	movne	r3, #64	; 0x40
 8006238:	2000      	movs	r0, #0
 800623a:	6031      	str	r1, [r6, #0]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	b016      	add	sp, #88	; 0x58
 8006240:	bd70      	pop	{r4, r5, r6, pc}
 8006242:	466a      	mov	r2, sp
 8006244:	f000 f848 	bl	80062d8 <_fstat_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	dbec      	blt.n	8006226 <__swhatbuf_r+0x12>
 800624c:	9901      	ldr	r1, [sp, #4]
 800624e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006252:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006256:	4259      	negs	r1, r3
 8006258:	4159      	adcs	r1, r3
 800625a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800625e:	e7eb      	b.n	8006238 <__swhatbuf_r+0x24>

08006260 <__smakebuf_r>:
 8006260:	898b      	ldrh	r3, [r1, #12]
 8006262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006264:	079d      	lsls	r5, r3, #30
 8006266:	4606      	mov	r6, r0
 8006268:	460c      	mov	r4, r1
 800626a:	d507      	bpl.n	800627c <__smakebuf_r+0x1c>
 800626c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	2301      	movs	r3, #1
 8006276:	6163      	str	r3, [r4, #20]
 8006278:	b002      	add	sp, #8
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	ab01      	add	r3, sp, #4
 800627e:	466a      	mov	r2, sp
 8006280:	f7ff ffc8 	bl	8006214 <__swhatbuf_r>
 8006284:	9900      	ldr	r1, [sp, #0]
 8006286:	4605      	mov	r5, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f7ff fbb5 	bl	80059f8 <_malloc_r>
 800628e:	b948      	cbnz	r0, 80062a4 <__smakebuf_r+0x44>
 8006290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006294:	059a      	lsls	r2, r3, #22
 8006296:	d4ef      	bmi.n	8006278 <__smakebuf_r+0x18>
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	e7e3      	b.n	800626c <__smakebuf_r+0xc>
 80062a4:	89a3      	ldrh	r3, [r4, #12]
 80062a6:	6020      	str	r0, [r4, #0]
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	9b00      	ldr	r3, [sp, #0]
 80062b0:	6163      	str	r3, [r4, #20]
 80062b2:	9b01      	ldr	r3, [sp, #4]
 80062b4:	6120      	str	r0, [r4, #16]
 80062b6:	b15b      	cbz	r3, 80062d0 <__smakebuf_r+0x70>
 80062b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f81d 	bl	80062fc <_isatty_r>
 80062c2:	b128      	cbz	r0, 80062d0 <__smakebuf_r+0x70>
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	81a3      	strh	r3, [r4, #12]
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	431d      	orrs	r5, r3
 80062d4:	81a5      	strh	r5, [r4, #12]
 80062d6:	e7cf      	b.n	8006278 <__smakebuf_r+0x18>

080062d8 <_fstat_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	4d07      	ldr	r5, [pc, #28]	; (80062f8 <_fstat_r+0x20>)
 80062dc:	2300      	movs	r3, #0
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	f7fa fce4 	bl	8000cb2 <_fstat>
 80062ea:	1c43      	adds	r3, r0, #1
 80062ec:	d102      	bne.n	80062f4 <_fstat_r+0x1c>
 80062ee:	682b      	ldr	r3, [r5, #0]
 80062f0:	b103      	cbz	r3, 80062f4 <_fstat_r+0x1c>
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	200002b8 	.word	0x200002b8

080062fc <_isatty_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d06      	ldr	r5, [pc, #24]	; (8006318 <_isatty_r+0x1c>)
 8006300:	2300      	movs	r3, #0
 8006302:	4604      	mov	r4, r0
 8006304:	4608      	mov	r0, r1
 8006306:	602b      	str	r3, [r5, #0]
 8006308:	f7fa fce3 	bl	8000cd2 <_isatty>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_isatty_r+0x1a>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_isatty_r+0x1a>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	200002b8 	.word	0x200002b8

0800631c <_sbrk_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d06      	ldr	r5, [pc, #24]	; (8006338 <_sbrk_r+0x1c>)
 8006320:	2300      	movs	r3, #0
 8006322:	4604      	mov	r4, r0
 8006324:	4608      	mov	r0, r1
 8006326:	602b      	str	r3, [r5, #0]
 8006328:	f7fa fcec 	bl	8000d04 <_sbrk>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d102      	bne.n	8006336 <_sbrk_r+0x1a>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	b103      	cbz	r3, 8006336 <_sbrk_r+0x1a>
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	bd38      	pop	{r3, r4, r5, pc}
 8006338:	200002b8 	.word	0x200002b8

0800633c <_init>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr

08006348 <_fini>:
 8006348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800634a:	bf00      	nop
 800634c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800634e:	bc08      	pop	{r3}
 8006350:	469e      	mov	lr, r3
 8006352:	4770      	bx	lr
